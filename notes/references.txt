https://reactjs.org/docs/thinking-in-react.html
https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
Dynamics on a static page: https://javascript.plainenglish.io/integrating-stand-alone-react-components-on-a-static-page-21dd4fd3074


Component Structure:
- static props
- dynamic state props
- parent/child double link

- html render function
- 


Passing props from parent to children:
1. Nested parent-child instantiation: Parent is instantiated, and nested children are wired to props.children
<Parent>
    <Child />
    <Child />
</Parent>

2. Parent.render(): <>{props.children}</>

3. Child props breakdown:
- The props we instantiated it with
- Child props are automatically unioned with all the props in their lineage
- 

4. Pass a parent state into child props:
<Parent>
    <Child props={
        parentState: 
    }/>
</Parent>






1. Component Architecture



2. Block Architecture:
block: single directory
- block.js: export default function like App that returns a root to render
- block-component.js: export default class extends React.component

3. Add block.js to index.js: use registerComponent and mapping.js to automate this 

4. Add block. to index.html as a div








Nested Render:

Parent: func render(): return {
    <Child

    >

    </Child>
}