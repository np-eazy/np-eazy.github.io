{"ast":null,"code":"import { coinFlip, randRange } from '../../../utils/functions';\nimport { complex, sqrt, exp, atan, sin, cos, acos, pow, add, subtract, multiply, divide } from 'mathjs';\nconst A0 = 1;\nfunction getFactorial(n) {\n  var soln = 1;\n  for (var i = 0; i < n; i++) {\n    soln *= i + 1;\n  }\n  return soln;\n}\nfunction mapToSpherical(x, y, z) {\n  var rho = sqrt(x * x + y * y + z * z);\n  var theta = atan(y / x);\n  var phi = acos(z / rho);\n  return [rho, theta, phi];\n}\nfunction getNormalization(n, l) {\n  var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n  var radius = rho => 2 * rho / (n * A0);\n  return rho => constTerm * exp(radius(rho) / -2) * pow(radius(rho), l);\n}\nfunction getLaguerrePolynomial(n, l) {\n  var a = 2 * l + 1;\n  var k = n - l - 1;\n  var memoTable = Array(n);\n  memoTable[0] = rho => 1;\n  memoTable[1] = rho => 1 + a - rho;\n  for (var i = 2; i < n; i++) {\n    memoTable[i] = rho => {\n      var leftTerm = (2 * k + a - rho) * memoTable[i - 1](rho);\n      var rightTerm = (k - a - 1) * memoTable[i - 2](rho);\n      return (leftTerm - rightTerm) / k;\n    };\n  }\n  return rho => memoTable[n - 1](rho) * getNormalization(n, l)(rho);\n}\nfunction getLegendrePolynomial(l, m) {\n  var memoTable = Array(l);\n  memoTable[0] = x => 1;\n  memoTable[1] = x => x;\n  for (var i = 2; i < l; i++) {\n    memoTable[i] = x => {\n      var leftTerm = x * (2 * l - 1) * memoTable[i - 1](x);\n      var rightTerm = (l + m - 1) * memoTable[i - 2](x);\n      return (leftTerm - rightTerm) / (l - m);\n    };\n  }\n  return memoTable[l - 1];\n}\nfunction getSphericalHarmonic(l, m) {\n  var sign = complex(m % 2 == 0 ? 1 : -1, 0);\n  var normalization = complex(sqrt(getFactorial(l - m) * (2 * l + 1) / (getFactorial(l + m) * 4 * Math.PI)), 0);\n  var complexTerm = phi => exp(complex(0, m * phi));\n  return phi => multiply(sign, normalization, complexTerm(phi));\n}\nfunction getFunctional(n, l, m) {\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n  };\n}\nfunction getGradient(n, l, m) {\n  var rhoTerm = getLaguerrePolynomial(n, l);\n  var delta = 0.01;\n  // TODO: Explicitly calculate functions for less computational load\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    var deltaRho = (getLaguerrePolynomial(n, l)(rho + delta / 2) - getLaguerrePolynomial(n, l)(rho - delta / 2)) / delta;\n    var deltaTheta = (getLegendrePolynomial(l, m)(theta + delta / 2) - getLegendrePolynomial(l, m)(theta - delta / 2)) / (delta * rho);\n    var deltaPhi = (getSphericalHarmonic(l, m)(phi + delta / 2) - getSphericalHarmonic(l, m)(phi - delta / 2)) / (delta * rho * Math.sin(theta));\n    var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n    var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n    var unitPhi = [sin(phi) * -1, cos(phi), 0];\n    return [unitRho[0] * deltaRho + unitTheta[0] * deltaTheta + unitPhi[0] * deltaPhi, unitRho[1] * deltaRho + unitTheta[1] * deltaTheta + unitPhi[1] * deltaPhi, unitRho[2] * deltaRho + unitTheta[2] * deltaTheta + unitPhi[2] * deltaPhi];\n  };\n}\nfunction getEnergyLevel(n) {\n  return 1 / (n * n);\n}\nclass Particle {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  move(dx, dy, dz) {\n    this.x += dx;\n    this.y += dy;\n    this.z = dz;\n  }\n}\nconst Atom = class {\n  constructor(props) {\n    this.superposition = props.superposition;\n    this.particleCount = props.particleCount;\n    this.boxSize = props.boxSize;\n    this.timer = 1;\n    this.particles = [];\n    while (this.particles.length < props.particleCount) {\n      var newParticle = new Particle(randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize));\n      if (coinFlip(this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z))) {\n        this.particles.push(newParticle);\n      }\n    }\n  }\n  getWavefunction(x, y, z, t) {\n    var total = 0;\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      console.log(t);\n      //console.log(getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z));\n\n      total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n    }\n    return total;\n  }\n  getProbabilityDistribution(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = complex.conjugate(wavefunction);\n    return wavefunction * wavefunctionC;\n  }\n  getWaveFunctionGradient(x, y, z, t) {\n    var total = [0, 0, 0];\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      var grad = phase * this.superposition[i].weight * getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n      total[0] += grad[0];\n      total[1] += grad[1];\n      total[2] += grad[2];\n    }\n    return total;\n  }\n  getVelocity(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = complex.conjugate(wavefunction);\n    var gradient = this.getWavefunctionGradient(x, y, z, t);\n    var gradientC = [complex.conjugate(gradient[0]), complex.conjugate(gradient[1]), complex.conjugate(gradient[2])];\n    var velocity = [(wavefunction * gradientC[0] - wavefunctionC * gradient[0]) / (wavefunction * wavefunctionC), (wavefunction * gradientC[1] - wavefunctionC * gradient[1]) / (wavefunction * wavefunctionC), (wavefunction * gradientC[2] - wavefunctionC * gradient[2]) / (wavefunction * wavefunctionC)];\n    return velocity;\n  }\n  update(increment) {\n    for (var i = 0; i < this.particles.length; i++) {\n      var p = this.particles[i];\n      var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n      p.move(velocity[0], velocity[1], velocity[2]);\n    }\n    this.timer += increment;\n    var p = this.particles[0];\n    var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n    console.log(velocity);\n    return this;\n  }\n};\nexport default Atom;","map":{"version":3,"names":["coinFlip","randRange","complex","sqrt","exp","atan","sin","cos","acos","pow","add","subtract","multiply","divide","A0","getFactorial","n","soln","i","mapToSpherical","x","y","z","rho","theta","phi","getNormalization","l","constTerm","radius","getLaguerrePolynomial","a","k","memoTable","Array","leftTerm","rightTerm","getLegendrePolynomial","m","getSphericalHarmonic","sign","normalization","Math","PI","complexTerm","getFunctional","sphericals","getGradient","rhoTerm","delta","deltaRho","deltaTheta","deltaPhi","unitRho","unitTheta","unitPhi","getEnergyLevel","Particle","constructor","move","dx","dy","dz","Atom","props","superposition","particleCount","boxSize","timer","particles","length","newParticle","getProbabilityDistribution","push","getWavefunction","t","total","phase","console","log","weight","wavefunction","wavefunctionC","conjugate","getWaveFunctionGradient","grad","getVelocity","gradient","getWavefunctionGradient","gradientC","velocity","update","increment","p"],"sources":["/Users/joeyzhu/Projects/joey-j-zhu.github.io/src/components/fold/fold-graphics/atom.js"],"sourcesContent":["import { coinFlip, randRange, } from '../../../utils/functions';\nimport { complex, sqrt, exp, atan, sin, cos, acos, pow, add, subtract, multiply, divide } from 'mathjs';\n\n\nconst A0 = 1;\n\nfunction getFactorial(n) {\n    var soln = 1;\n    for (var i = 0; i < n; i++) {\n        soln *= i + 1;\n    }\n    return soln;\n}\n\nfunction mapToSpherical(x, y, z) {\n    var rho = sqrt(x * x + y * y + z * z);\n    var theta = atan(y / x);\n    var phi = acos(z / rho);\n    return [rho, theta, phi];\n}\n\nfunction getNormalization(n, l) {\n    var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n    var radius = (rho) => (2 * rho) / (n * A0);\n    return (rho) => constTerm * exp(radius(rho) / -2) * pow(radius(rho), l);\n}\n\n\nfunction getLaguerrePolynomial(n, l) {\n    var a = 2 * l + 1;\n    var k = n - l - 1;\n    var memoTable = Array(n);\n    memoTable[0] = (rho) => 1;\n    memoTable[1] = (rho) => (1 + a - rho);\n    for (var i = 2; i < n; i++) {\n        memoTable[i] = (rho) => {\n            var leftTerm = (2 * k + a - rho) * memoTable[i - 1](rho);\n            var rightTerm = (k - a - 1) * memoTable[i - 2](rho);\n            return (leftTerm - rightTerm) / k;\n        }\n    }\n    return (rho) => memoTable[n - 1](rho) * getNormalization(n, l)(rho);\n}\n\nfunction getLegendrePolynomial(l, m) {\n    var memoTable = Array(l);\n    memoTable[0] = (x) => 1;\n    memoTable[1] = (x) => x;\n    for (var i = 2; i < l; i++) {\n        memoTable[i] = (x) => {\n            var leftTerm = x * (2 * l - 1) * memoTable[i - 1](x);\n            var rightTerm = (l + m - 1) * memoTable[i - 2](x);\n            return (leftTerm - rightTerm) / (l - m);\n        }\n    }\n    return memoTable[l - 1];\n}\n\nfunction getSphericalHarmonic(l, m) {\n    var sign = complex(m % 2 == 0 ? 1 : -1, 0);\n    var normalization = complex(sqrt((getFactorial(l - m) * (2 * l + 1)) / (getFactorial(l + m) * 4 * Math.PI)), 0);\n    var complexTerm = (phi) => exp(complex(0, m * phi));\n\n    return (phi) => multiply(sign, normalization, complexTerm(phi));\n}\n\nfunction getFunctional(n, l, m) {\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n        \n        return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n    };\n}\n\nfunction getGradient(n, l, m) {\n    var rhoTerm = getLaguerrePolynomial(n, l);\n    var delta = 0.01;\n    // TODO: Explicitly calculate functions for less computational load\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n\n        var deltaRho = (getLaguerrePolynomial(n, l)(rho + delta / 2) - getLaguerrePolynomial(n, l)(rho - delta / 2)) / (delta);\n        var deltaTheta = (getLegendrePolynomial(l, m)(theta + delta / 2) - getLegendrePolynomial(l, m)(theta - delta / 2)) / (delta * rho);\n        var deltaPhi = (getSphericalHarmonic(l, m)(phi + delta / 2) - getSphericalHarmonic(l, m)(phi - delta / 2)) / (delta * rho * Math.sin(theta));\n\n        var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n        var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n        var unitPhi = [sin(phi) * -1, cos(phi), 0];\n\n        return [\n            unitRho[0] * deltaRho + unitTheta[0] * deltaTheta + unitPhi[0] * deltaPhi,\n            unitRho[1] * deltaRho + unitTheta[1] * deltaTheta + unitPhi[1] * deltaPhi,\n            unitRho[2] * deltaRho + unitTheta[2] * deltaTheta + unitPhi[2] * deltaPhi,\n        ];\n    }\n}\n\nfunction getEnergyLevel(n) {\n    return 1 / (n * n);\n}\n\n\nclass Particle {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    move(dx, dy, dz) {\n        this.x += dx;\n        this.y += dy;\n        this.z = dz;\n    }\n}\n\n\nconst Atom = class {\n    constructor (props) {\n        this.superposition = props.superposition;\n        this.particleCount = props.particleCount;\n        this.boxSize = props.boxSize;\n        this.timer = 1;\n\n        this.particles = [];\n        \n        while (this.particles.length < props.particleCount) {\n            var newParticle = new Particle(\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n            )\n            if (coinFlip(this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z))) {\n                this.particles.push(newParticle);\n            }\n        }\n    }\n\n    getWavefunction(x, y, z, t) {\n        var total = 0;\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            \n            console.log(t);\n            //console.log(getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z));\n\n            total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n        }\n        return total;\n    }\n\n    getProbabilityDistribution(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = complex.conjugate(wavefunction);\n        return wavefunction * wavefunctionC;    \n    }\n\n    getWaveFunctionGradient(x, y, z, t) {\n        var total = [0, 0, 0];\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            var grad = phase * this.superposition[i].weight * getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n            total[0] += grad[0];\n            total[1] += grad[1];\n            total[2] += grad[2];\n        }\n        return total;\n    }\n    \n    getVelocity(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = complex.conjugate(wavefunction);\n        var gradient = this.getWavefunctionGradient(x, y, z, t);\n        var gradientC = [\n            complex.conjugate(gradient[0]), \n            complex.conjugate(gradient[1]),\n            complex.conjugate(gradient[2]),\n        ]\n        var velocity = [\n            (wavefunction * gradientC[0] - wavefunctionC * gradient[0]) / (wavefunction * wavefunctionC),\n            (wavefunction * gradientC[1] - wavefunctionC * gradient[1]) / (wavefunction * wavefunctionC),\n            (wavefunction * gradientC[2] - wavefunctionC * gradient[2]) / (wavefunction * wavefunctionC),\n        ]\n        return velocity;\n    }\n\n    update(increment) {\n        for (var i = 0; i < this.particles.length; i++) {\n            var p = this.particles[i];\n            var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n            p.move(velocity[0], velocity[1], velocity[2]);\n        }\n        this.timer += increment;\n\n        var p = this.particles[0];\n        var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n        console.log(velocity);\n        return this;\n    }\n}\n\nexport default Atom;"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAS,0BAA0B;AAC/D,SAASC,OAAO,EAAEC,IAAI,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,QAAQ;AAGvG,MAAMC,EAAE,GAAG,CAAC;AAEZ,SAASC,YAAY,CAACC,CAAC,EAAE;EACrB,IAAIC,IAAI,GAAG,CAAC;EACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAE;IACxBD,IAAI,IAAIC,CAAC,GAAG,CAAC;EACjB;EACA,OAAOD,IAAI;AACf;AAEA,SAASE,cAAc,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EAC7B,IAAIC,GAAG,GAAGpB,IAAI,CAACiB,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAC;EACrC,IAAIE,KAAK,GAAGnB,IAAI,CAACgB,CAAC,GAAGD,CAAC,CAAC;EACvB,IAAIK,GAAG,GAAGjB,IAAI,CAACc,CAAC,GAAGC,GAAG,CAAC;EACvB,OAAO,CAACA,GAAG,EAAEC,KAAK,EAAEC,GAAG,CAAC;AAC5B;AAEA,SAASC,gBAAgB,CAACV,CAAC,EAAEW,CAAC,EAAE;EAC5B,IAAIC,SAAS,GAAGzB,IAAI,CAACM,GAAG,CAAC,CAAC,IAAIO,CAAC,GAAGF,EAAE,CAAC,EAAE,CAAC,CAAC,GAAGC,YAAY,CAACC,CAAC,GAAGW,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAGX,CAAC,GAAGD,YAAY,CAACC,CAAC,GAAGW,CAAC,CAAC,CAAC,CAAC;EACpG,IAAIE,MAAM,GAAIN,GAAG,IAAM,CAAC,GAAGA,GAAG,IAAKP,CAAC,GAAGF,EAAE,CAAC;EAC1C,OAAQS,GAAG,IAAKK,SAAS,GAAGxB,GAAG,CAACyB,MAAM,CAACN,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAGd,GAAG,CAACoB,MAAM,CAACN,GAAG,CAAC,EAAEI,CAAC,CAAC;AAC3E;AAGA,SAASG,qBAAqB,CAACd,CAAC,EAAEW,CAAC,EAAE;EACjC,IAAII,CAAC,GAAG,CAAC,GAAGJ,CAAC,GAAG,CAAC;EACjB,IAAIK,CAAC,GAAGhB,CAAC,GAAGW,CAAC,GAAG,CAAC;EACjB,IAAIM,SAAS,GAAGC,KAAK,CAAClB,CAAC,CAAC;EACxBiB,SAAS,CAAC,CAAC,CAAC,GAAIV,GAAG,IAAK,CAAC;EACzBU,SAAS,CAAC,CAAC,CAAC,GAAIV,GAAG,IAAM,CAAC,GAAGQ,CAAC,GAAGR,GAAI;EACrC,KAAK,IAAIL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,CAAC,EAAEE,CAAC,EAAE,EAAE;IACxBe,SAAS,CAACf,CAAC,CAAC,GAAIK,GAAG,IAAK;MACpB,IAAIY,QAAQ,GAAG,CAAC,CAAC,GAAGH,CAAC,GAAGD,CAAC,GAAGR,GAAG,IAAIU,SAAS,CAACf,CAAC,GAAG,CAAC,CAAC,CAACK,GAAG,CAAC;MACxD,IAAIa,SAAS,GAAG,CAACJ,CAAC,GAAGD,CAAC,GAAG,CAAC,IAAIE,SAAS,CAACf,CAAC,GAAG,CAAC,CAAC,CAACK,GAAG,CAAC;MACnD,OAAO,CAACY,QAAQ,GAAGC,SAAS,IAAIJ,CAAC;IACrC,CAAC;EACL;EACA,OAAQT,GAAG,IAAKU,SAAS,CAACjB,CAAC,GAAG,CAAC,CAAC,CAACO,GAAG,CAAC,GAAGG,gBAAgB,CAACV,CAAC,EAAEW,CAAC,CAAC,CAACJ,GAAG,CAAC;AACvE;AAEA,SAASc,qBAAqB,CAACV,CAAC,EAAEW,CAAC,EAAE;EACjC,IAAIL,SAAS,GAAGC,KAAK,CAACP,CAAC,CAAC;EACxBM,SAAS,CAAC,CAAC,CAAC,GAAIb,CAAC,IAAK,CAAC;EACvBa,SAAS,CAAC,CAAC,CAAC,GAAIb,CAAC,IAAKA,CAAC;EACvB,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGS,CAAC,EAAET,CAAC,EAAE,EAAE;IACxBe,SAAS,CAACf,CAAC,CAAC,GAAIE,CAAC,IAAK;MAClB,IAAIe,QAAQ,GAAGf,CAAC,IAAI,CAAC,GAAGO,CAAC,GAAG,CAAC,CAAC,GAAGM,SAAS,CAACf,CAAC,GAAG,CAAC,CAAC,CAACE,CAAC,CAAC;MACpD,IAAIgB,SAAS,GAAG,CAACT,CAAC,GAAGW,CAAC,GAAG,CAAC,IAAIL,SAAS,CAACf,CAAC,GAAG,CAAC,CAAC,CAACE,CAAC,CAAC;MACjD,OAAO,CAACe,QAAQ,GAAGC,SAAS,KAAKT,CAAC,GAAGW,CAAC,CAAC;IAC3C,CAAC;EACL;EACA,OAAOL,SAAS,CAACN,CAAC,GAAG,CAAC,CAAC;AAC3B;AAEA,SAASY,oBAAoB,CAACZ,CAAC,EAAEW,CAAC,EAAE;EAChC,IAAIE,IAAI,GAAGtC,OAAO,CAACoC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAC1C,IAAIG,aAAa,GAAGvC,OAAO,CAACC,IAAI,CAAEY,YAAY,CAACY,CAAC,GAAGW,CAAC,CAAC,IAAI,CAAC,GAAGX,CAAC,GAAG,CAAC,CAAC,IAAKZ,YAAY,CAACY,CAAC,GAAGW,CAAC,CAAC,GAAG,CAAC,GAAGI,IAAI,CAACC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAC/G,IAAIC,WAAW,GAAInB,GAAG,IAAKrB,GAAG,CAACF,OAAO,CAAC,CAAC,EAAEoC,CAAC,GAAGb,GAAG,CAAC,CAAC;EAEnD,OAAQA,GAAG,IAAKb,QAAQ,CAAC4B,IAAI,EAAEC,aAAa,EAAEG,WAAW,CAACnB,GAAG,CAAC,CAAC;AACnE;AAEA,SAASoB,aAAa,CAAC7B,CAAC,EAAEW,CAAC,EAAEW,CAAC,EAAE;EAC5B,OAAO,CAAClB,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAK;IAChB,IAAIwB,UAAU,GAAG3B,cAAc,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IACxC,IAAIC,GAAG,GAAGuB,UAAU,CAAC,CAAC,CAAC;IACvB,IAAItB,KAAK,GAAGsB,UAAU,CAAC,CAAC,CAAC;IACzB,IAAIrB,GAAG,GAAGqB,UAAU,CAAC,CAAC,CAAC;IAEvB,OAAOlC,QAAQ,CAACkB,qBAAqB,CAACd,CAAC,EAAEW,CAAC,CAAC,CAACJ,GAAG,CAAC,EAAEc,qBAAqB,CAACV,CAAC,EAAEW,CAAC,CAAC,CAAC/B,GAAG,CAACiB,KAAK,CAAC,CAAC,EAAEe,oBAAoB,CAACZ,CAAC,EAAEW,CAAC,CAAC,CAACb,GAAG,CAAC,CAAC;EAC/H,CAAC;AACL;AAEA,SAASsB,WAAW,CAAC/B,CAAC,EAAEW,CAAC,EAAEW,CAAC,EAAE;EAC1B,IAAIU,OAAO,GAAGlB,qBAAqB,CAACd,CAAC,EAAEW,CAAC,CAAC;EACzC,IAAIsB,KAAK,GAAG,IAAI;EAChB;EACA,OAAO,CAAC7B,CAAC,EAAEC,CAAC,EAAEC,CAAC,KAAK;IAChB,IAAIwB,UAAU,GAAG3B,cAAc,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IACxC,IAAIC,GAAG,GAAGuB,UAAU,CAAC,CAAC,CAAC;IACvB,IAAItB,KAAK,GAAGsB,UAAU,CAAC,CAAC,CAAC;IACzB,IAAIrB,GAAG,GAAGqB,UAAU,CAAC,CAAC,CAAC;IAEvB,IAAII,QAAQ,GAAG,CAACpB,qBAAqB,CAACd,CAAC,EAAEW,CAAC,CAAC,CAACJ,GAAG,GAAG0B,KAAK,GAAG,CAAC,CAAC,GAAGnB,qBAAqB,CAACd,CAAC,EAAEW,CAAC,CAAC,CAACJ,GAAG,GAAG0B,KAAK,GAAG,CAAC,CAAC,IAAKA,KAAM;IACtH,IAAIE,UAAU,GAAG,CAACd,qBAAqB,CAACV,CAAC,EAAEW,CAAC,CAAC,CAACd,KAAK,GAAGyB,KAAK,GAAG,CAAC,CAAC,GAAGZ,qBAAqB,CAACV,CAAC,EAAEW,CAAC,CAAC,CAACd,KAAK,GAAGyB,KAAK,GAAG,CAAC,CAAC,KAAKA,KAAK,GAAG1B,GAAG,CAAC;IAClI,IAAI6B,QAAQ,GAAG,CAACb,oBAAoB,CAACZ,CAAC,EAAEW,CAAC,CAAC,CAACb,GAAG,GAAGwB,KAAK,GAAG,CAAC,CAAC,GAAGV,oBAAoB,CAACZ,CAAC,EAAEW,CAAC,CAAC,CAACb,GAAG,GAAGwB,KAAK,GAAG,CAAC,CAAC,KAAKA,KAAK,GAAG1B,GAAG,GAAGmB,IAAI,CAACpC,GAAG,CAACkB,KAAK,CAAC,CAAC;IAE5I,IAAI6B,OAAO,GAAG,CAAC/C,GAAG,CAACkB,KAAK,CAAC,GAAGjB,GAAG,CAACkB,GAAG,CAAC,EAAEnB,GAAG,CAACkB,KAAK,CAAC,GAAGlB,GAAG,CAACmB,GAAG,CAAC,EAAElB,GAAG,CAACiB,KAAK,CAAC,CAAC;IACxE,IAAI8B,SAAS,GAAG,CAAC/C,GAAG,CAACiB,KAAK,CAAC,GAAGjB,GAAG,CAACkB,GAAG,CAAC,EAAElB,GAAG,CAACiB,KAAK,CAAC,GAAGlB,GAAG,CAACmB,GAAG,CAAC,EAAEnB,GAAG,CAACkB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/E,IAAI+B,OAAO,GAAG,CAACjD,GAAG,CAACmB,GAAG,CAAC,GAAG,CAAC,CAAC,EAAElB,GAAG,CAACkB,GAAG,CAAC,EAAE,CAAC,CAAC;IAE1C,OAAO,CACH4B,OAAO,CAAC,CAAC,CAAC,GAAGH,QAAQ,GAAGI,SAAS,CAAC,CAAC,CAAC,GAAGH,UAAU,GAAGI,OAAO,CAAC,CAAC,CAAC,GAAGH,QAAQ,EACzEC,OAAO,CAAC,CAAC,CAAC,GAAGH,QAAQ,GAAGI,SAAS,CAAC,CAAC,CAAC,GAAGH,UAAU,GAAGI,OAAO,CAAC,CAAC,CAAC,GAAGH,QAAQ,EACzEC,OAAO,CAAC,CAAC,CAAC,GAAGH,QAAQ,GAAGI,SAAS,CAAC,CAAC,CAAC,GAAGH,UAAU,GAAGI,OAAO,CAAC,CAAC,CAAC,GAAGH,QAAQ,CAC5E;EACL,CAAC;AACL;AAEA,SAASI,cAAc,CAACxC,CAAC,EAAE;EACvB,OAAO,CAAC,IAAIA,CAAC,GAAGA,CAAC,CAAC;AACtB;AAGA,MAAMyC,QAAQ,CAAC;EACXC,WAAW,CAACtC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;IACjB,IAAI,CAACF,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,CAAC,GAAGA,CAAC;EACd;EAEAqC,IAAI,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAE;IACb,IAAI,CAAC1C,CAAC,IAAIwC,EAAE;IACZ,IAAI,CAACvC,CAAC,IAAIwC,EAAE;IACZ,IAAI,CAACvC,CAAC,GAAGwC,EAAE;EACf;AACJ;AAGA,MAAMC,IAAI,GAAG,MAAM;EACfL,WAAW,CAAEM,KAAK,EAAE;IAChB,IAAI,CAACC,aAAa,GAAGD,KAAK,CAACC,aAAa;IACxC,IAAI,CAACC,aAAa,GAAGF,KAAK,CAACE,aAAa;IACxC,IAAI,CAACC,OAAO,GAAGH,KAAK,CAACG,OAAO;IAC5B,IAAI,CAACC,KAAK,GAAG,CAAC;IAEd,IAAI,CAACC,SAAS,GAAG,EAAE;IAEnB,OAAO,IAAI,CAACA,SAAS,CAACC,MAAM,GAAGN,KAAK,CAACE,aAAa,EAAE;MAChD,IAAIK,WAAW,GAAG,IAAId,QAAQ,CAC1BxD,SAAS,CAAC+D,KAAK,CAACG,OAAO,GAAG,CAAC,CAAC,EAAEH,KAAK,CAACG,OAAO,CAAC,EAC5ClE,SAAS,CAAC+D,KAAK,CAACG,OAAO,GAAG,CAAC,CAAC,EAAEH,KAAK,CAACG,OAAO,CAAC,EAC5ClE,SAAS,CAAC+D,KAAK,CAACG,OAAO,GAAG,CAAC,CAAC,EAAEH,KAAK,CAACG,OAAO,CAAC,CAC/C;MACD,IAAInE,QAAQ,CAAC,IAAI,CAACwE,0BAA0B,CAACD,WAAW,CAACnD,CAAC,EAAEmD,WAAW,CAAClD,CAAC,EAAEkD,WAAW,CAACjD,CAAC,CAAC,CAAC,EAAE;QACxF,IAAI,CAAC+C,SAAS,CAACI,IAAI,CAACF,WAAW,CAAC;MACpC;IACJ;EACJ;EAEAG,eAAe,CAACtD,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEqD,CAAC,EAAE;IACxB,IAAIC,KAAK,GAAG,CAAC;IACb,KAAK,IAAI1D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC+C,aAAa,CAACK,MAAM,EAAEpD,CAAC,EAAE,EAAE;MAChD,IAAI2D,KAAK,GAAGzE,GAAG,CAACF,OAAO,CAAC,CAAC,EAAEsD,cAAc,CAAC,IAAI,CAACS,aAAa,CAAC/C,CAAC,CAAC,CAACF,CAAC,CAAC,GAAG2D,CAAC,CAAC,CAAC;MAExEG,OAAO,CAACC,GAAG,CAACJ,CAAC,CAAC;MACd;;MAEAC,KAAK,GAAGlE,GAAG,CAACkE,KAAK,EAAEhE,QAAQ,CAACiE,KAAK,EAAE,IAAI,CAACZ,aAAa,CAAC/C,CAAC,CAAC,CAAC8D,MAAM,EAAEnC,aAAa,CAAC,IAAI,CAACoB,aAAa,CAAC/C,CAAC,CAAC,CAACF,CAAC,EAAE,IAAI,CAACiD,aAAa,CAAC/C,CAAC,CAAC,CAACS,CAAC,EAAE,IAAI,CAACsC,aAAa,CAAC/C,CAAC,CAAC,CAACoB,CAAC,CAAC,CAAClB,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC;IACxK;IACA,OAAOsD,KAAK;EAChB;EAEAJ,0BAA0B,CAACpD,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEqD,CAAC,EAAE;IACnC,IAAIM,YAAY,GAAG,IAAI,CAACP,eAAe,CAACtD,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEqD,CAAC,CAAC;IACnD,IAAIO,aAAa,GAAGhF,OAAO,CAACiF,SAAS,CAACF,YAAY,CAAC;IACnD,OAAOA,YAAY,GAAGC,aAAa;EACvC;EAEAE,uBAAuB,CAAChE,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEqD,CAAC,EAAE;IAChC,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACrB,KAAK,IAAI1D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC+C,aAAa,CAACK,MAAM,EAAEpD,CAAC,EAAE,EAAE;MAChD,IAAI2D,KAAK,GAAGzE,GAAG,CAACF,OAAO,CAAC,CAAC,EAAEsD,cAAc,CAAC,IAAI,CAACS,aAAa,CAAC/C,CAAC,CAAC,CAACF,CAAC,CAAC,GAAG2D,CAAC,CAAC,CAAC;MACxE,IAAIU,IAAI,GAAGR,KAAK,GAAG,IAAI,CAACZ,aAAa,CAAC/C,CAAC,CAAC,CAAC8D,MAAM,GAAGjC,WAAW,CAAC,IAAI,CAACkB,aAAa,CAAC/C,CAAC,CAAC,CAACF,CAAC,EAAE,IAAI,CAACiD,aAAa,CAAC/C,CAAC,CAAC,CAACS,CAAC,EAAE,IAAI,CAACsC,aAAa,CAAC/C,CAAC,CAAC,CAACoB,CAAC,CAAC,CAAClB,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;MACjJsD,KAAK,CAAC,CAAC,CAAC,IAAIS,IAAI,CAAC,CAAC,CAAC;MACnBT,KAAK,CAAC,CAAC,CAAC,IAAIS,IAAI,CAAC,CAAC,CAAC;MACnBT,KAAK,CAAC,CAAC,CAAC,IAAIS,IAAI,CAAC,CAAC,CAAC;IACvB;IACA,OAAOT,KAAK;EAChB;EAEAU,WAAW,CAAClE,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEqD,CAAC,EAAE;IACpB,IAAIM,YAAY,GAAG,IAAI,CAACP,eAAe,CAACtD,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEqD,CAAC,CAAC;IACnD,IAAIO,aAAa,GAAGhF,OAAO,CAACiF,SAAS,CAACF,YAAY,CAAC;IACnD,IAAIM,QAAQ,GAAG,IAAI,CAACC,uBAAuB,CAACpE,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEqD,CAAC,CAAC;IACvD,IAAIc,SAAS,GAAG,CACZvF,OAAO,CAACiF,SAAS,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC,EAC9BrF,OAAO,CAACiF,SAAS,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC,EAC9BrF,OAAO,CAACiF,SAAS,CAACI,QAAQ,CAAC,CAAC,CAAC,CAAC,CACjC;IACD,IAAIG,QAAQ,GAAG,CACX,CAACT,YAAY,GAAGQ,SAAS,CAAC,CAAC,CAAC,GAAGP,aAAa,GAAGK,QAAQ,CAAC,CAAC,CAAC,KAAKN,YAAY,GAAGC,aAAa,CAAC,EAC5F,CAACD,YAAY,GAAGQ,SAAS,CAAC,CAAC,CAAC,GAAGP,aAAa,GAAGK,QAAQ,CAAC,CAAC,CAAC,KAAKN,YAAY,GAAGC,aAAa,CAAC,EAC5F,CAACD,YAAY,GAAGQ,SAAS,CAAC,CAAC,CAAC,GAAGP,aAAa,GAAGK,QAAQ,CAAC,CAAC,CAAC,KAAKN,YAAY,GAAGC,aAAa,CAAC,CAC/F;IACD,OAAOQ,QAAQ;EACnB;EAEAC,MAAM,CAACC,SAAS,EAAE;IACd,KAAK,IAAI1E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACmD,SAAS,CAACC,MAAM,EAAEpD,CAAC,EAAE,EAAE;MAC5C,IAAI2E,CAAC,GAAG,IAAI,CAACxB,SAAS,CAACnD,CAAC,CAAC;MACzB,IAAIwE,QAAQ,GAAG,IAAI,CAACJ,WAAW,CAACO,CAAC,CAACzE,CAAC,EAAEyE,CAAC,CAACxE,CAAC,EAAEwE,CAAC,CAACvE,CAAC,EAAE,IAAI,CAAC8C,KAAK,CAAC;MAC1DyB,CAAC,CAAClC,IAAI,CAAC+B,QAAQ,CAAC,CAAC,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,CAAC;IACjD;IACA,IAAI,CAACtB,KAAK,IAAIwB,SAAS;IAEvB,IAAIC,CAAC,GAAG,IAAI,CAACxB,SAAS,CAAC,CAAC,CAAC;IACzB,IAAIqB,QAAQ,GAAG,IAAI,CAACJ,WAAW,CAACO,CAAC,CAACzE,CAAC,EAAEyE,CAAC,CAACxE,CAAC,EAAEwE,CAAC,CAACvE,CAAC,EAAE,IAAI,CAAC8C,KAAK,CAAC;IAC1DU,OAAO,CAACC,GAAG,CAACW,QAAQ,CAAC;IACrB,OAAO,IAAI;EACf;AACJ,CAAC;AAED,eAAe3B,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}