{"ast":null,"code":"import { coinFlip, randRange, getFactorial, getDoubleFactorial, choose, mapToSpherical, getNormalization, getLaguerrePolynomial, getLegendrePolynomial, getSphericalHarmonic } from '../../../utils/functions';\nimport { complex, conjugate, sqrt, exp, atan, sin, cos, acos, pow, add, subtract, multiply, divide } from 'mathjs';\nconst A0 = 1;\nfunction getEnergyLevel(n) {\n  return 1 / (n * n);\n}\nclass Particle {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  move(dx, dy, dz) {\n    this.x += dx;\n    this.y += dy;\n    this.z += dz;\n  }\n  set(dx, dy, dz) {\n    this.x = dx;\n    this.y = dy;\n    this.z = dz;\n  }\n}\nconst Atom = class {\n  constructor(props) {\n    this.superposition = props.superposition;\n    this.particleCount = props.particleCount;\n    this.boxSize = props.boxSize;\n    this.timer = 0;\n    this.particles = [];\n    var probabilityMultiplier = 10000;\n    while (this.particles.length < props.particleCount) {\n      var newParticle = new Particle(randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize));\n      if (coinFlip(probabilityMultiplier * this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z, 0))) {\n        this.particles.push(newParticle);\n      }\n    }\n  }\n  getWavefunction(x, y, z, t) {\n    var total = 0;\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n    }\n    return total;\n  }\n  getProbabilityDistribution(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    return wavefunction * wavefunctionC;\n  }\n  getWavefunctionGradient(x, y, z, t) {\n    var total = [0, 0, 0];\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      var grad = multiply(phase, this.superposition[i].weight, getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z));\n      total[0] = add(total[0], grad[0]);\n      total[1] = add(total[1], grad[1]);\n      total[2] = add(total[2], grad[2]);\n    }\n    return total;\n  }\n  getVelocity(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    var gradient = this.getWavefunctionGradient(x, y, z, t);\n    var gradientC = [gradient[0].conjugate(), gradient[1].conjugate(), gradient[2].conjugate()];\n    var velocity = [divide(subtract(multiply(wavefunction, gradientC[0]), multiply(wavefunctionC, gradient[0])), multiply(wavefunction, wavefunctionC)), divide(subtract(multiply(wavefunction, gradientC[1]), multiply(wavefunctionC, gradient[1])), multiply(wavefunction, wavefunctionC)), divide(subtract(multiply(wavefunction, gradientC[2]), multiply(wavefunctionC, gradient[2])), multiply(wavefunction, wavefunctionC))];\n    return velocity;\n  }\n  update(increment) {\n    var deltat = 0.001;\n    var p = this.particles[0];\n    //console.log(p);\n    for (var i = 0; i < this.particles.length; i++) {\n      var p = this.particles[i];\n      var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n      var oldNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n      p.move(velocity[0].im * deltat, velocity[1].im * deltat, velocity[2].im * deltat);\n      var newNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n      p.set(p.x * oldNorm / newNorm, p.y * oldNorm / newNorm, p.z * oldNorm / newNorm);\n    }\n    this.timer += 1;\n    return this;\n  }\n};\nexport default Atom;","map":{"version":3,"names":["coinFlip","randRange","getFactorial","getDoubleFactorial","choose","mapToSpherical","getNormalization","getLaguerrePolynomial","getLegendrePolynomial","getSphericalHarmonic","complex","conjugate","sqrt","exp","atan","sin","cos","acos","pow","add","subtract","multiply","divide","A0","getEnergyLevel","n","Particle","constructor","x","y","z","move","dx","dy","dz","set","Atom","props","superposition","particleCount","boxSize","timer","particles","probabilityMultiplier","length","newParticle","getProbabilityDistribution","push","getWavefunction","t","total","i","phase","weight","getFunctional","l","m","wavefunction","wavefunctionC","getWavefunctionGradient","grad","getGradient","getVelocity","gradient","gradientC","velocity","update","increment","deltat","p","oldNorm","im","newNorm"],"sources":["/Users/joeyzhu/Projects/joey-j-zhu.github.io/src/components/fold/fold-graphics/atom.js"],"sourcesContent":["import { coinFlip, \n    randRange, \n    getFactorial, \n    getDoubleFactorial, \n    choose, mapToSpherical, \n    getNormalization, getLaguerrePolynomial, \n    getLegendrePolynomial, \n    getSphericalHarmonic,    } from '../../../utils/functions';\nimport { complex, conjugate, sqrt, exp, atan, sin, cos, acos, pow, add, subtract, multiply, divide } from 'mathjs';\n\nconst A0 = 1;\n\n\nfunction getEnergyLevel(n) {\n    return 1 / (n * n);\n}\n\n\nclass Particle {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    move(dx, dy, dz) {\n        this.x += dx;\n        this.y += dy;\n        this.z += dz;\n    }\n\n    set(dx, dy, dz) {\n        this.x = dx;\n        this.y = dy;\n        this.z = dz;\n    }\n}\n\n\nconst Atom = class {\n    constructor (props) {\n        this.superposition = props.superposition;\n        this.particleCount = props.particleCount;\n        this.boxSize = props.boxSize;\n        this.timer = 0;\n\n        this.particles = [];\n        \n        var probabilityMultiplier = 10000;\n        while (this.particles.length < props.particleCount) {\n            var newParticle = new Particle(\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n            );\n            if (coinFlip(probabilityMultiplier * this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z, 0))) {\n                this.particles.push(newParticle);\n            }\n        }\n    }\n\n    getWavefunction(x, y, z, t) {\n        var total = 0;\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n        }\n        return total;\n    }\n\n    getProbabilityDistribution(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        return wavefunction * wavefunctionC;    \n    }\n\n    getWavefunctionGradient(x, y, z, t) {\n        var total = [0, 0, 0];\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            var grad = multiply(phase, this.superposition[i].weight, getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z));\n            total[0] = add(total[0], grad[0]);\n            total[1] = add(total[1], grad[1]);\n            total[2] = add(total[2], grad[2]);\n        }\n        return total;\n    }\n    \n    getVelocity(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        var gradient = this.getWavefunctionGradient(x, y, z, t);\n        var gradientC = [\n            gradient[0].conjugate(), \n            gradient[1].conjugate(), \n            gradient[2].conjugate(), \n        ]\n        var velocity = [\n            divide(subtract(multiply(wavefunction, gradientC[0]), multiply(wavefunctionC, gradient[0])), multiply(wavefunction, wavefunctionC)),\n            divide(subtract(multiply(wavefunction, gradientC[1]), multiply(wavefunctionC, gradient[1])), multiply(wavefunction, wavefunctionC)),\n            divide(subtract(multiply(wavefunction, gradientC[2]), multiply(wavefunctionC, gradient[2])), multiply(wavefunction, wavefunctionC))\n        ]\n        return velocity;\n    }\n\n    update(increment) {\n        var deltat = 0.001;\n        var p = this.particles[0];\n        //console.log(p);\n        for (var i = 0; i < this.particles.length; i++) {\n            var p = this.particles[i];\n            var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n            var oldNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n            p.move(velocity[0].im * deltat, velocity[1].im * deltat, velocity[2].im * deltat);\n            var newNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n            p.set(p.x * oldNorm / newNorm, p.y * oldNorm / newNorm, p.z * oldNorm / newNorm);\n        }\n        this.timer += 1;\n        return this;\n    }\n}\n\nexport default Atom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}