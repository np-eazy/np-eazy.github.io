{"ast":null,"code":"import { X, Y, GRID_SIZE, T, G0, G1, BASE, RAD } from './graphic-utils.js';\nimport { WHITE, THEME_GRAY_6B } from '../../../utils/colors';\nfunction clip1d(a) {\n  return Math.min(Math.max(0, a), 0.9999);\n}\n\n// The colors here are on unit scale to make calculations easier in lieu of importing utils/colors.js\nfunction componentToHex(c) {\n  var hex = c.toString(16);\n  return hex.length == 1 ? \"0\" + hex : hex;\n}\nfunction rgbToHex(r, g, b) {\n  return \"#\" + componentToHex(Math.floor(r * 256)) + componentToHex(Math.floor(g * 256)) + componentToHex(Math.floor(b * 256));\n}\nfunction localToGlobal(c) {\n  return [G0[X] + (G1[X] - G0[X]) * c[X] / GRID_SIZE[X], G0[Y] + (G1[Y] - G0[Y]) * c[Y] / GRID_SIZE[Y]];\n}\nfunction drawLine(canvas, c1, c2, width, color) {\n  canvas.strokeStyle = color;\n  canvas.lineWidth = width;\n  canvas.beginPath();\n  canvas.moveTo(c1[X], c1[Y]);\n  canvas.lineTo(c2[X], c2[Y]);\n  canvas.stroke();\n}\nfunction drawCircle(canvas, c, radius, color) {\n  canvas.beginPath();\n  canvas.arc(c[X], c[Y], radius, 0, 2 * Math.PI);\n  canvas.fillStyle = color;\n  canvas.fill();\n}\nfunction project(x, y, z) {\n  var scale = 100;\n  return [(x + 1) * scale + 500, (y + 1) * scale + 300];\n}\nconst AtomGraphics = _ref => {\n  let {\n    atom\n  } = _ref;\n  function render(canvas) {\n    for (var i = 0; i < atom.particles.length; i++) {\n      atom.particles[i].sort((p1, p2) => p1.z > p2.z ? 1 : p1.z < p2.z ? -1 : 0);\n      var p = atom.particles[i];\n      var color = THEME_GRAY_6H;\n      var point = project(p.x, p.y, p.z);\n      drawCircle(canvas, [point[0], point[1]], 3, color.getHex);\n    }\n  }\n  var canv = document.getElementById(\"fold-graphics\");\n  var ctx = canv != null ? canv.getContext('2d') : null;\n  if (ctx != null && atom != undefined) {\n    ctx.clearRect(G0[X], G0[Y], G1[X], G1[Y]);\n    render(ctx);\n  }\n};\n_c = AtomGraphics;\nexport default AtomGraphics;\nvar _c;\n$RefreshReg$(_c, \"AtomGraphics\");","map":{"version":3,"names":["X","Y","GRID_SIZE","T","G0","G1","BASE","RAD","WHITE","THEME_GRAY_6B","clip1d","a","Math","min","max","componentToHex","c","hex","toString","length","rgbToHex","r","g","b","floor","localToGlobal","drawLine","canvas","c1","c2","width","color","strokeStyle","lineWidth","beginPath","moveTo","lineTo","stroke","drawCircle","radius","arc","PI","fillStyle","fill","project","x","y","z","scale","AtomGraphics","atom","render","i","particles","sort","p1","p2","p","THEME_GRAY_6H","point","getHex","canv","document","getElementById","ctx","getContext","undefined","clearRect"],"sources":["/Users/joeyzhu/Projects/joey-j-zhu.github.io/src/components/fold/fold-graphics/atom-graphics.js"],"sourcesContent":["\nimport {X, Y, GRID_SIZE, T, G0, G1, BASE, RAD} from './graphic-utils.js';\nimport { WHITE, THEME_GRAY_6B } from '../../../utils/colors';\n\nfunction clip1d(a) {\n    return Math.min(Math.max(0, a), 0.9999);\n}\n\n// The colors here are on unit scale to make calculations easier in lieu of importing utils/colors.js\nfunction componentToHex(c) {\n    var hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n    return \"#\" + componentToHex(Math.floor(r * 256)) + componentToHex(Math.floor(g * 256)) + componentToHex(Math.floor(b * 256));\n}\n\nfunction localToGlobal(c) {\n    return [G0[X] + (G1[X] - G0[X]) * c[X] / GRID_SIZE[X], G0[Y] + (G1[Y] - G0[Y]) * c[Y] / GRID_SIZE[Y]];\n}\n\nfunction drawLine(canvas, c1, c2, width, color) {\n    canvas.strokeStyle = color;\n    canvas.lineWidth = width;\n    canvas.beginPath();\n    canvas.moveTo(c1[X], c1[Y]);\n    canvas.lineTo(c2[X], c2[Y]);\n    canvas.stroke();\n}\n\nfunction drawCircle(canvas, c, radius, color) {\n    canvas.beginPath();\n    canvas.arc(c[X], c[Y], radius, 0 , 2 * Math.PI);\n    canvas.fillStyle = color;\n    canvas.fill();\n}\n\nfunction project(x, y, z) {\n    var scale = 100;\n    return [(x + 1) * scale + 500, (y + 1) * scale + 300];\n}\n\nconst AtomGraphics = ({\n    atom,\n}) => {\n    function render(canvas) {\n        for (var i = 0; i < atom.particles.length; i++) {\n            atom.particles[i].sort((p1, p2) => p1.z > p2.z ? 1 : (p1.z < p2.z ? -1 : 0));\n            var p = atom.particles[i];\n            var color = THEME_GRAY_6H;\n            var point = project(p.x, p.y, p.z);\n            drawCircle(canvas, [point[0], point[1]], 3, color.getHex);\n        }\n    }\n\n    var canv = document.getElementById(\"fold-graphics\");\n    var ctx = canv != null ? canv.getContext('2d') : null;\n\n    if (ctx != null && atom != undefined) {\n        ctx.clearRect(G0[X], G0[Y], G1[X], G1[Y]);\n        render(ctx);\n    }\n};\n\nexport default AtomGraphics;\n\n\n"],"mappings":"AACA,SAAQA,CAAC,EAAEC,CAAC,EAAEC,SAAS,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAEC,IAAI,EAAEC,GAAG,QAAO,oBAAoB;AACxE,SAASC,KAAK,EAAEC,aAAa,QAAQ,uBAAuB;AAE5D,SAASC,MAAM,CAACC,CAAC,EAAE;EACf,OAAOC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEH,CAAC,CAAC,EAAE,MAAM,CAAC;AAC3C;;AAEA;AACA,SAASI,cAAc,CAACC,CAAC,EAAE;EACvB,IAAIC,GAAG,GAAGD,CAAC,CAACE,QAAQ,CAAC,EAAE,CAAC;EACxB,OAAOD,GAAG,CAACE,MAAM,IAAI,CAAC,GAAG,GAAG,GAAGF,GAAG,GAAGA,GAAG;AAC5C;AAEA,SAASG,QAAQ,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACvB,OAAO,GAAG,GAAGR,cAAc,CAACH,IAAI,CAACY,KAAK,CAACH,CAAC,GAAG,GAAG,CAAC,CAAC,GAAGN,cAAc,CAACH,IAAI,CAACY,KAAK,CAACF,CAAC,GAAG,GAAG,CAAC,CAAC,GAAGP,cAAc,CAACH,IAAI,CAACY,KAAK,CAACD,CAAC,GAAG,GAAG,CAAC,CAAC;AAChI;AAEA,SAASE,aAAa,CAACT,CAAC,EAAE;EACtB,OAAO,CAACZ,EAAE,CAACJ,CAAC,CAAC,GAAG,CAACK,EAAE,CAACL,CAAC,CAAC,GAAGI,EAAE,CAACJ,CAAC,CAAC,IAAIgB,CAAC,CAAChB,CAAC,CAAC,GAAGE,SAAS,CAACF,CAAC,CAAC,EAAEI,EAAE,CAACH,CAAC,CAAC,GAAG,CAACI,EAAE,CAACJ,CAAC,CAAC,GAAGG,EAAE,CAACH,CAAC,CAAC,IAAIe,CAAC,CAACf,CAAC,CAAC,GAAGC,SAAS,CAACD,CAAC,CAAC,CAAC;AACzG;AAEA,SAASyB,QAAQ,CAACC,MAAM,EAAEC,EAAE,EAAEC,EAAE,EAAEC,KAAK,EAAEC,KAAK,EAAE;EAC5CJ,MAAM,CAACK,WAAW,GAAGD,KAAK;EAC1BJ,MAAM,CAACM,SAAS,GAAGH,KAAK;EACxBH,MAAM,CAACO,SAAS,EAAE;EAClBP,MAAM,CAACQ,MAAM,CAACP,EAAE,CAAC5B,CAAC,CAAC,EAAE4B,EAAE,CAAC3B,CAAC,CAAC,CAAC;EAC3B0B,MAAM,CAACS,MAAM,CAACP,EAAE,CAAC7B,CAAC,CAAC,EAAE6B,EAAE,CAAC5B,CAAC,CAAC,CAAC;EAC3B0B,MAAM,CAACU,MAAM,EAAE;AACnB;AAEA,SAASC,UAAU,CAACX,MAAM,EAAEX,CAAC,EAAEuB,MAAM,EAAER,KAAK,EAAE;EAC1CJ,MAAM,CAACO,SAAS,EAAE;EAClBP,MAAM,CAACa,GAAG,CAACxB,CAAC,CAAChB,CAAC,CAAC,EAAEgB,CAAC,CAACf,CAAC,CAAC,EAAEsC,MAAM,EAAE,CAAC,EAAG,CAAC,GAAG3B,IAAI,CAAC6B,EAAE,CAAC;EAC/Cd,MAAM,CAACe,SAAS,GAAGX,KAAK;EACxBJ,MAAM,CAACgB,IAAI,EAAE;AACjB;AAEA,SAASC,OAAO,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;EACtB,IAAIC,KAAK,GAAG,GAAG;EACf,OAAO,CAAC,CAACH,CAAC,GAAG,CAAC,IAAIG,KAAK,GAAG,GAAG,EAAE,CAACF,CAAC,GAAG,CAAC,IAAIE,KAAK,GAAG,GAAG,CAAC;AACzD;AAEA,MAAMC,YAAY,GAAG,QAEf;EAAA,IAFgB;IAClBC;EACJ,CAAC;EACG,SAASC,MAAM,CAACxB,MAAM,EAAE;IACpB,KAAK,IAAIyB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACG,SAAS,CAAClC,MAAM,EAAEiC,CAAC,EAAE,EAAE;MAC5CF,IAAI,CAACG,SAAS,CAACD,CAAC,CAAC,CAACE,IAAI,CAAC,CAACC,EAAE,EAAEC,EAAE,KAAKD,EAAE,CAACR,CAAC,GAAGS,EAAE,CAACT,CAAC,GAAG,CAAC,GAAIQ,EAAE,CAACR,CAAC,GAAGS,EAAE,CAACT,CAAC,GAAG,CAAC,CAAC,GAAG,CAAE,CAAC;MAC5E,IAAIU,CAAC,GAAGP,IAAI,CAACG,SAAS,CAACD,CAAC,CAAC;MACzB,IAAIrB,KAAK,GAAG2B,aAAa;MACzB,IAAIC,KAAK,GAAGf,OAAO,CAACa,CAAC,CAACZ,CAAC,EAAEY,CAAC,CAACX,CAAC,EAAEW,CAAC,CAACV,CAAC,CAAC;MAClCT,UAAU,CAACX,MAAM,EAAE,CAACgC,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE5B,KAAK,CAAC6B,MAAM,CAAC;IAC7D;EACJ;EAEA,IAAIC,IAAI,GAAGC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC;EACnD,IAAIC,GAAG,GAAGH,IAAI,IAAI,IAAI,GAAGA,IAAI,CAACI,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI;EAErD,IAAID,GAAG,IAAI,IAAI,IAAId,IAAI,IAAIgB,SAAS,EAAE;IAClCF,GAAG,CAACG,SAAS,CAAC/D,EAAE,CAACJ,CAAC,CAAC,EAAEI,EAAE,CAACH,CAAC,CAAC,EAAEI,EAAE,CAACL,CAAC,CAAC,EAAEK,EAAE,CAACJ,CAAC,CAAC,CAAC;IACzCkD,MAAM,CAACa,GAAG,CAAC;EACf;AACJ,CAAC;AAAC,KApBIf,YAAY;AAsBlB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}