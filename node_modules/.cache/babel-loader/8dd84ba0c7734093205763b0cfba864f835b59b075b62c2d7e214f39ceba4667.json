{"ast":null,"code":"import { coinFlip, randRange } from '../../../utils/functions';\nimport { complex, conjugate, sqrt, exp, atan, sin, cos, acos, pow, add, subtract, multiply, divide } from 'mathjs';\nconst A0 = 1;\nfunction getFactorial(n) {\n  var soln = 1;\n  for (var i = 0; i < n; i++) {\n    soln *= i + 1;\n  }\n  return soln;\n}\nfunction mapToSpherical(x, y, z) {\n  var rho = sqrt(x * x + y * y + z * z);\n  var theta = atan(y / x);\n  var phi = acos(z / rho);\n  return [rho, theta, phi];\n}\nfunction getNormalization(n, l) {\n  var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n  var radius = rho => 2 * rho / (n * A0);\n  return rho => constTerm * exp(radius(rho) / -2) * pow(radius(rho), l);\n}\nfunction getLaguerrePolynomial(n, l) {\n  var a = 2 * l + 1;\n  var k = n - l - 1;\n  var memoTable = Array(n);\n  memoTable[0] = rho => 1;\n  memoTable[1] = rho => 1 + a - rho;\n  for (var i = 2; i < n; i++) {\n    memoTable[i] = rho => {\n      var leftTerm = (2 * k + a - rho) * memoTable[i - 1](rho);\n      var rightTerm = (k - a - 1) * memoTable[i - 2](rho);\n      return (leftTerm - rightTerm) / k;\n    };\n  }\n  return rho => memoTable[n - 1](rho) * getNormalization(n, l)(rho);\n}\nfunction getLegendreBasePolynomials(n) {\n  var memoTable = Array(l);\n  memoTable[0] = x => 1;\n  memoTable[1] = x => x;\n  for (var i = 2; i < l; i++) {\n    memoTable[i] = x => {\n      var leftTerm = (2 * n - 1) * memoTable[i - 1](x);\n      var rightTerm = (n - 1) * memoTable[i - 2](x);\n      return (leftTerm - rightTerm) / n;\n    };\n  }\n  return memoTable[l - 1];\n}\nfunction getLegendrePolynomial(l, m) {\n  var memoTable = Array(l);\n  memoTable[0] = x => 1;\n  memoTable[1] = x => x;\n  for (var i = 2; i < l; i++) {\n    memoTable[i] = x => {\n      var leftTerm = x * (2 * l - 1) * memoTable[i - 1](x);\n      var rightTerm = (l + Math.abs(m) - 1) * memoTable[i - 2](x);\n      return (leftTerm - rightTerm) / (l - absm);\n    };\n  }\n  return memoTable[l - 1];\n}\nfunction getSphericalHarmonic(l, m) {\n  var sign = complex(m % 2 == 0 ? 1 : -1, 0);\n  var normalization = complex(sqrt(getFactorial(l - m) * (2 * l + 1) / (getFactorial(l + m) * 4 * Math.PI)), 0);\n  var complexTerm = phi => exp(complex(0, m * phi));\n  return phi => multiply(sign, normalization, complexTerm(phi));\n}\nfunction getFunctional(n, l, m) {\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n  };\n}\nfunction getGradient(n, l, m) {\n  var delta = 0.01;\n  // TODO: Explicitly calculate functions for less computational load\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    var deltaRho = divide(subtract(getLaguerrePolynomial(n, l)(rho + delta / 2), getLaguerrePolynomial(n, l)(rho - delta / 2)), delta);\n    var deltaTheta = divide(subtract(getLegendrePolynomial(l, m)(theta + delta / 2), getLegendrePolynomial(l, m)(theta - delta / 2)), delta * rho);\n    var deltaPhi = divide(subtract(getSphericalHarmonic(l, m)(phi + delta / 2), getSphericalHarmonic(l, m)(phi - delta / 2)), delta * rho * Math.sin(theta));\n    var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n    var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n    var unitPhi = [sin(phi) * -1, cos(phi), 0];\n    return [add(multiply(unitRho[0], deltaRho), multiply(unitTheta[0], deltaTheta), multiply(unitPhi[0], deltaPhi)), add(multiply(unitRho[1], deltaRho), multiply(unitTheta[1], deltaTheta), multiply(unitPhi[1], deltaPhi)), add(multiply(unitRho[2], deltaRho), multiply(unitTheta[2], deltaTheta), multiply(unitPhi[2], deltaPhi))];\n  };\n}\nfunction getEnergyLevel(n) {\n  return 1 / (n * n);\n}\nclass Particle {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  move(dx, dy, dz) {\n    this.x += dx;\n    this.y += dy;\n    this.z += dz;\n  }\n  set(dx, dy, dz) {\n    this.x = dx;\n    this.y = dy;\n    this.z = dz;\n  }\n}\nconst Atom = class {\n  constructor(props) {\n    this.superposition = props.superposition;\n    this.particleCount = props.particleCount;\n    this.boxSize = props.boxSize;\n    this.timer = 0;\n    this.particles = [];\n    while (this.particles.length < props.particleCount) {\n      var newParticle = new Particle(randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize));\n      if (true || coinFlip(this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z))) {\n        this.particles.push(newParticle);\n      }\n    }\n  }\n  getWavefunction(x, y, z, t) {\n    var total = 0;\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n    }\n    return total;\n  }\n  getProbabilityDistribution(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    return wavefunction * wavefunctionC;\n  }\n  getWavefunctionGradient(x, y, z, t) {\n    var total = [0, 0, 0];\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      var grad = multiply(phase, this.superposition[i].weight, getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z));\n      total[0] = add(total[0], grad[0]);\n      total[1] = add(total[1], grad[1]);\n      total[2] = add(total[2], grad[2]);\n    }\n    return total;\n  }\n  getVelocity(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    var gradient = this.getWavefunctionGradient(x, y, z, t);\n    var gradientC = [gradient[0].conjugate(), gradient[1].conjugate(), gradient[2].conjugate()];\n    var velocity = [divide(subtract(multiply(wavefunction, gradientC[0]), multiply(wavefunctionC, gradient[0])), multiply(wavefunction, wavefunctionC)), divide(subtract(multiply(wavefunction, gradientC[1]), multiply(wavefunctionC, gradient[1])), multiply(wavefunction, wavefunctionC)), divide(subtract(multiply(wavefunction, gradientC[2]), multiply(wavefunctionC, gradient[2])), multiply(wavefunction, wavefunctionC))];\n    return velocity;\n  }\n  update(increment) {\n    var deltat = 0.0001;\n    for (var i = 0; i < this.particles.length; i++) {\n      var p = this.particles[i];\n      var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n      var oldNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n      p.move(velocity[0].im * deltat, velocity[1].im * deltat, velocity[2].im * deltat);\n      var newNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n      p.set(p.x * oldNorm / newNorm, p.y * oldNorm / newNorm, p.z * oldNorm / newNorm);\n    }\n    var p = this.particles[0];\n    //console.log(mapToSpherical(p.x, p.y, p.z));\n    this.timer += 1;\n    return this;\n  }\n};\nexport default Atom;","map":{"version":3,"names":["coinFlip","randRange","complex","conjugate","sqrt","exp","atan","sin","cos","acos","pow","add","subtract","multiply","divide","A0","getFactorial","n","soln","i","mapToSpherical","x","y","z","rho","theta","phi","getNormalization","l","constTerm","radius","getLaguerrePolynomial","a","k","memoTable","Array","leftTerm","rightTerm","getLegendreBasePolynomials","getLegendrePolynomial","m","Math","abs","absm","getSphericalHarmonic","sign","normalization","PI","complexTerm","getFunctional","sphericals","getGradient","delta","deltaRho","deltaTheta","deltaPhi","unitRho","unitTheta","unitPhi","getEnergyLevel","Particle","constructor","move","dx","dy","dz","set","Atom","props","superposition","particleCount","boxSize","timer","particles","length","newParticle","getProbabilityDistribution","push","getWavefunction","t","total","phase","weight","wavefunction","wavefunctionC","getWavefunctionGradient","grad","getVelocity","gradient","gradientC","velocity","update","increment","deltat","p","oldNorm","im","newNorm"],"sources":["/Users/joeyzhu/Projects/joey-j-zhu.github.io/src/components/fold/fold-graphics/atom.js"],"sourcesContent":["import { coinFlip, randRange, } from '../../../utils/functions';\nimport { complex, conjugate, sqrt, exp, atan, sin, cos, acos, pow, add, subtract, multiply, divide } from 'mathjs';\n\n\nconst A0 = 1;\n\nfunction getFactorial(n) {\n    var soln = 1;\n    for (var i = 0; i < n; i++) {\n        soln *= i + 1;\n    }\n    return soln;\n}\n\nfunction mapToSpherical(x, y, z) {\n    var rho = sqrt(x * x + y * y + z * z);\n    var theta = atan(y / x);\n    var phi = acos(z / rho);\n    return [rho, theta, phi];\n}\n\nfunction getNormalization(n, l) {\n    var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n    var radius = (rho) => (2 * rho) / (n * A0);\n    return (rho) => constTerm * exp(radius(rho) / -2) * pow(radius(rho), l);\n}\n\nfunction getLaguerrePolynomial(n, l) {\n    var a = 2 * l + 1;\n    var k = n - l - 1;\n    var memoTable = Array(n);\n    memoTable[0] = (rho) => 1;\n    memoTable[1] = (rho) => (1 + a - rho);\n    for (var i = 2; i < n; i++) {\n        memoTable[i] = (rho) => {\n            var leftTerm = (2 * k + a - rho) * memoTable[i - 1](rho);\n            var rightTerm = (k - a - 1) * memoTable[i - 2](rho);\n            return (leftTerm - rightTerm) / k;\n        }\n    }\n    return (rho) => memoTable[n - 1](rho) * getNormalization(n, l)(rho);\n}\n\nfunction getLegendreBasePolynomials(n) {\n    var memoTable = Array(l);\n    memoTable[0] = (x) => 1;\n    memoTable[1] = (x) => x;\n    for (var i = 2; i < l; i++) {\n        memoTable[i] = (x) => {\n            var leftTerm = (2 * n - 1) * memoTable[i - 1](x);\n            var rightTerm = (n - 1) * memoTable[i - 2](x);\n            return (leftTerm - rightTerm) / n;\n        }\n    }\n    return memoTable[l - 1];\n}\n\nfunction getLegendrePolynomial(l, m) {\n    var memoTable = Array(l);\n    memoTable[0] = (x) => 1;\n    memoTable[1] = (x) => x;\n    for (var i = 2; i < l; i++) {\n        memoTable[i] = (x) => {\n            var leftTerm = x * (2 * l - 1) * memoTable[i - 1](x);\n            var rightTerm = (l + Math.abs(m) - 1) * memoTable[i - 2](x);\n            return (leftTerm - rightTerm) / (l - absm);\n        }\n    }\n    return memoTable[l - 1];\n}\n\nfunction getSphericalHarmonic(l, m) {\n    var sign = complex(m % 2 == 0 ? 1 : -1, 0);\n    var normalization = complex(sqrt((getFactorial(l - m) * (2 * l + 1)) / (getFactorial(l + m) * 4 * Math.PI)), 0);\n    var complexTerm = (phi) => exp(complex(0, m * phi));\n\n    return (phi) => multiply(sign, normalization, complexTerm(phi));\n}\n\nfunction getFunctional(n, l, m) {\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n        \n        return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n    };\n}\n\nfunction getGradient(n, l, m) {\n    var delta = 0.01;\n    // TODO: Explicitly calculate functions for less computational load\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n\n        var deltaRho = divide(subtract(getLaguerrePolynomial(n, l)(rho + delta / 2), getLaguerrePolynomial(n, l)(rho - delta / 2)), (delta));\n        var deltaTheta = divide(subtract(getLegendrePolynomial(l, m)(theta + delta / 2), getLegendrePolynomial(l, m)(theta - delta / 2)), (delta * rho));\n        var deltaPhi = divide(subtract(getSphericalHarmonic(l, m)(phi + delta / 2), getSphericalHarmonic(l, m)(phi - delta / 2)), (delta * rho * Math.sin(theta)));\n\n        var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n        var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n        var unitPhi = [sin(phi) * -1, cos(phi), 0];\n\n        return [\n            add(multiply(unitRho[0], deltaRho), multiply(unitTheta[0], deltaTheta), multiply(unitPhi[0], deltaPhi)),\n            add(multiply(unitRho[1], deltaRho), multiply(unitTheta[1], deltaTheta), multiply(unitPhi[1], deltaPhi)),\n            add(multiply(unitRho[2], deltaRho), multiply(unitTheta[2], deltaTheta), multiply(unitPhi[2], deltaPhi)),\n        ];\n    }\n}\n\nfunction getEnergyLevel(n) {\n    return 1 / (n * n);\n}\n\n\nclass Particle {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    move(dx, dy, dz) {\n        this.x += dx;\n        this.y += dy;\n        this.z += dz;\n    }\n\n    set(dx, dy, dz) {\n        this.x = dx;\n        this.y = dy;\n        this.z = dz;\n    }\n}\n\n\nconst Atom = class {\n    constructor (props) {\n        this.superposition = props.superposition;\n        this.particleCount = props.particleCount;\n        this.boxSize = props.boxSize;\n        this.timer = 0;\n\n        this.particles = [];\n        \n        while (this.particles.length < props.particleCount) {\n            var newParticle = new Particle(\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n            );\n            if (true || coinFlip(this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z))) {\n                this.particles.push(newParticle);\n            }\n        }\n    }\n\n    getWavefunction(x, y, z, t) {\n        var total = 0;\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n        }\n        return total;\n    }\n\n    getProbabilityDistribution(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        return wavefunction * wavefunctionC;    \n    }\n\n    getWavefunctionGradient(x, y, z, t) {\n        var total = [0, 0, 0];\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            var grad = multiply(phase, this.superposition[i].weight, getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z));\n            total[0] = add(total[0], grad[0]);\n            total[1] = add(total[1], grad[1]);\n            total[2] = add(total[2], grad[2]);\n        }\n        return total;\n    }\n    \n    getVelocity(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        var gradient = this.getWavefunctionGradient(x, y, z, t);\n        var gradientC = [\n            gradient[0].conjugate(), \n            gradient[1].conjugate(), \n            gradient[2].conjugate(), \n        ]\n        var velocity = [\n            divide(subtract(multiply(wavefunction, gradientC[0]), multiply(wavefunctionC, gradient[0])), multiply(wavefunction, wavefunctionC)),\n            divide(subtract(multiply(wavefunction, gradientC[1]), multiply(wavefunctionC, gradient[1])), multiply(wavefunction, wavefunctionC)),\n            divide(subtract(multiply(wavefunction, gradientC[2]), multiply(wavefunctionC, gradient[2])), multiply(wavefunction, wavefunctionC))\n        ]\n        return velocity;\n    }\n\n    update(increment) {\n        var deltat = 0.0001;\n        for (var i = 0; i < this.particles.length; i++) {\n            var p = this.particles[i];\n            var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n            var oldNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n            p.move(velocity[0].im * deltat, velocity[1].im * deltat, velocity[2].im * deltat);\n            var newNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n            p.set(p.x * oldNorm / newNorm, p.y * oldNorm / newNorm, p.z * oldNorm / newNorm);\n        }\n        var p = this.particles[0];\n        //console.log(mapToSpherical(p.x, p.y, p.z));\n        this.timer += 1;\n        return this;\n    }\n}\n\nexport default Atom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}