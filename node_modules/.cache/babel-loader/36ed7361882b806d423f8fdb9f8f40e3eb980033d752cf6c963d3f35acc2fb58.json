{"ast":null,"code":"import { coinFlip, randRange } from '../../../utils/functions';\nimport { complex, sqrt, exp, atan, sin, cos } from 'mathjs';\nconst A0 = 1;\nfunction getFactorial(n) {\n  var soln = 1;\n  for (var i = 0; i < n; i++) {\n    soln *= i + 1;\n  }\n  return soln;\n}\nfunction mapToSpherical(x, y, z) {\n  var rho = sqrt(x * x + y * y + z * z);\n  var theta = atan(y / x);\n  var phi = acos(z / rho);\n  return rho, theta, phi;\n}\nfunction getNormalization(n, l) {\n  var constTerm = Math.sqrt(Math.pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n  var radius = rho => 2 * rho / (n * A0);\n  return rho => constTerm * Math.exp(radius(rho) / -2) * Math.pow(radius(rho), l);\n}\nfunction getLaguerrePolynomial(n, l) {\n  var a = 2 * l + 1;\n  var k = n - l - 1;\n  var memoTable = Array(n);\n  memoTable[0] = rho => 1;\n  memoTable[1] = rho => 1 + a - rho;\n  for (var i = 2; i < n; i++) {\n    memoTable[i] = rho => {\n      var leftTerm = (2 * k + a - rho) * memoTable[i - 1](rho);\n      var rightTerm = (k - a - 1) * memoTable[i - 2](rho);\n      return (leftTerm - rightTerm) / k;\n    };\n  }\n  return rho => memoTable[n - 1](rho) * getNormalization(n, l)(rho);\n}\nfunction getLegendrePolynomial(l, m) {\n  var memoTable = Array(l);\n  memoTable[0] = x => 1;\n  memoTable[1] = x => x;\n  for (var i = 2; i < l; i++) {\n    memoTable[i] = x => {\n      var leftTerm = x * (2 * l - 1) * memoTable[i - 1](x);\n      var rightTerm = (l + m - 1) * memoTable[i - 2](x);\n      return (leftTerm - rightTerm) / (l - m);\n    };\n  }\n  return memoTable[l - 1];\n}\nfunction getSphericalHarmonic(l, m) {\n  var sign = m % 2 == 0 ? 1 : -1;\n  var normalization = Math.sqrt(getFactorial(l - m) * (2 * l + 1) / (getFactorial(l + m) * 4 * Math.PI));\n  var exponent = phi => Math.exp(complex(0, m * phi));\n  return phi => sign * normalization * exponent(phi);\n}\nfunction getFunctional(n, l, m) {\n  return (x, y, z) => {\n    var rho,\n      theta,\n      phi = mapToSpherical(x, y, z);\n    return getLaguerrePolynomial(n, l)(rho) * getLegendrePolynomial(l, m)(Math.cos(theta)) * getSphericalHarmonic(l, m)(theta, phi);\n  };\n}\nfunction getGradient(n, l, m) {\n  var rhoTerm = getLaguerrePolynomial(n, l);\n  var delta = 0.01;\n  // TODO: Explicitly calculate functions for less computational load\n  return (x, y, z) => {\n    var rho,\n      theta,\n      phi = mapToSpherical(x, y, z);\n    var deltaRho = (getLaguerrePolynomial(n, l)(rho + delta / 2) - getLaguerrePolynomial(n, l)(rho - delta / 2)) / delta;\n    var deltaTheta = (getLegendrePolynomial(l, m)(theta + delta / 2) - getLegendrePolynomial(l, m)(theta - delta / 2)) / (delta * rho);\n    var deltaPhi = (getSphericalHarmonic(l, m)(phi + delta / 2) - getSphericalHarmonic(l, m)(phi - delta / 2)) / (delta * rho * Math.sin(theta));\n    var unitRho = [Math.sin(theta) * Math.cos(phi), Math.sin(theta) * Math.sin(phi), Math.cos(theta)];\n    var unitTheta = [Math.cos(theta) * Math.cos(phi), Math.cos(theta) * Math.sin(phi), Math.sin(theta) * -1];\n    var unitPhi = [Math.sin(phi) * -1, Math.cos(phi), 0];\n    return [unitRho[0] * deltaRho + unitTheta[0] * deltaTheta + unitPhi[0] * deltaPhi, unitRho[1] * deltaRho + unitTheta[1] * deltaTheta + unitPhi[1] * deltaPhi, unitRho[2] * deltaRho + unitTheta[2] * deltaTheta + unitPhi[2] * deltaPhi];\n  };\n}\nfunction getEnergyLevel(n) {\n  return 1 / (n * n);\n}\nclass Particle {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  move(dx, dy, dz) {\n    this.x += dx;\n    this.y += dy;\n    this.z = dz;\n  }\n}\nconst Atom = class {\n  constructor(props) {\n    this.superposition = props.superposition;\n    this.particleCount = props.particleCount;\n    this.boxSize = props.boxSize;\n    this.particles = [];\n    while (this.particles.length < props.particleCount) {\n      var newParticle = new Particle(randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize));\n      if (coinFlip(this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z))) {\n        this.particles.push(newParticle);\n      }\n    }\n    console.log(this.particles);\n  }\n  getWavefunction(x, y, z, t) {\n    var total = 0;\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = Math.exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      total += phase * this.superposition[i].weight * getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n    }\n    return total;\n  }\n  getProbabilityDistribution(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = complex.conjugate(wavefunction);\n    return wavefunction * wavefunctionC;\n  }\n  getWaveFunctionGradient(x, y, z, t) {\n    var total = [0, 0, 0];\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = Math.exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      var grad = phase * this.superposition[i].weight * getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n      total[0] += grad[0];\n      total[1] += grad[1];\n      total[2] += grad[2];\n    }\n    return total;\n  }\n  getVelocity(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = complex.conjugate(wavefunction);\n    var gradient = this.getWavefunctionGradient(x, y, z, t);\n    var gradientC = [complex.conjugate(gradient[0]), complex.conjugate(gradient[1]), complex.conjugate(gradient[2])];\n    var velocity = [(wavefunction * gradientC[0] - wavefunctionC * gradient[0]) / (wavefunction * wavefunctionC), (wavefunction * gradientC[1] - wavefunctionC * gradient[1]) / (wavefunction * wavefunctionC), (wavefunction * gradientC[2] - wavefunctionC * gradient[2]) / (wavefunction * wavefunctionC)];\n    return velocity;\n  }\n  update(increment) {\n    for (var i = 0; i < this.particles.length; i++) {\n      var p = this.particles[i];\n      var velocity = this.getVelocity(p.x, p.y, p.z);\n      p.move(velocity[0], velocity[1], velocity[2]);\n    }\n    this.timer += increment;\n    var p = this.particles[0];\n    var velocity = this.getVelocity(p.x, p.y, p.z);\n    console.log(velocity);\n    return this;\n  }\n};\nexport default Atom;","map":{"version":3,"names":["coinFlip","randRange","complex","sqrt","exp","atan","sin","cos","A0","getFactorial","n","soln","i","mapToSpherical","x","y","z","rho","theta","phi","acos","getNormalization","l","constTerm","Math","pow","radius","getLaguerrePolynomial","a","k","memoTable","Array","leftTerm","rightTerm","getLegendrePolynomial","m","getSphericalHarmonic","sign","normalization","PI","exponent","getFunctional","getGradient","rhoTerm","delta","deltaRho","deltaTheta","deltaPhi","unitRho","unitTheta","unitPhi","getEnergyLevel","Particle","constructor","move","dx","dy","dz","Atom","props","superposition","particleCount","boxSize","particles","length","newParticle","getProbabilityDistribution","push","console","log","getWavefunction","t","total","phase","weight","wavefunction","wavefunctionC","conjugate","getWaveFunctionGradient","grad","getVelocity","gradient","getWavefunctionGradient","gradientC","velocity","update","increment","p","timer"],"sources":["/Users/joeyzhu/Projects/joey-j-zhu.github.io/src/components/fold/fold-graphics/atom.js"],"sourcesContent":["import { coinFlip, randRange, } from '../../../utils/functions';\nimport { complex, sqrt, exp, atan, sin, cos,  } from 'mathjs';\n\n\nconst A0 = 1;\n\nfunction getFactorial(n) {\n    var soln = 1;\n    for (var i = 0; i < n; i++) {\n        soln *= i + 1;\n    }\n    return soln;\n}\n\nfunction mapToSpherical(x, y, z) {\n    var rho = sqrt(x * x + y * y + z * z);\n    var theta = atan(y / x);\n    var phi = acos(z / rho);\n    return (rho, theta, phi);\n}\n\nfunction getNormalization(n, l) {\n    var constTerm = Math.sqrt(Math.pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n    var radius = (rho) => (2 * rho) / (n * A0);\n    return (rho) => constTerm * Math.exp(radius(rho) / -2) * Math.pow(radius(rho), l);\n}\n\n\nfunction getLaguerrePolynomial(n, l) {\n    var a = 2 * l + 1;\n    var k = n - l - 1;\n    var memoTable = Array(n);\n    memoTable[0] = (rho) => 1;\n    memoTable[1] = (rho) => (1 + a - rho);\n    for (var i = 2; i < n; i++) {\n        memoTable[i] = (rho) => {\n            var leftTerm = (2 * k + a - rho) * memoTable[i - 1](rho);\n            var rightTerm = (k - a - 1) * memoTable[i - 2](rho);\n            return (leftTerm - rightTerm) / k;\n        }\n    }\n    return (rho) => memoTable[n - 1](rho) * getNormalization(n, l)(rho);\n}\n\nfunction getLegendrePolynomial(l, m) {\n    var memoTable = Array(l);\n    memoTable[0] = (x) => 1;\n    memoTable[1] = (x) => x;\n    for (var i = 2; i < l; i++) {\n        memoTable[i] = (x) => {\n            var leftTerm = x * (2 * l - 1) * memoTable[i - 1](x);\n            var rightTerm = (l + m - 1) * memoTable[i - 2](x);\n            return (leftTerm - rightTerm) / (l - m);\n        }\n    }\n    return memoTable[l - 1];\n}\n\nfunction getSphericalHarmonic(l, m) {\n    var sign = m % 2 == 0 ? 1 : -1;\n    var normalization = Math.sqrt((getFactorial(l - m) * (2 * l + 1)) / (getFactorial(l + m) * 4 * Math.PI));\n    var exponent = (phi) => Math.exp(complex(0, m * phi));\n\n    return (phi) => (sign * normalization * exponent(phi));\n}\n\n\nfunction getFunctional(n, l, m) {\n    return (x, y, z) => {\n        var rho, theta, phi = mapToSpherical(x, y, z);\n        return getLaguerrePolynomial(n, l)(rho) * getLegendrePolynomial(l, m)(Math.cos(theta)) * getSphericalHarmonic(l, m)(theta, phi);\n    };\n}\n\nfunction getGradient(n, l, m) {\n    var rhoTerm = getLaguerrePolynomial(n, l);\n    var delta = 0.01;\n    // TODO: Explicitly calculate functions for less computational load\n    return (x, y, z) => {\n        var rho, theta, phi = mapToSpherical(x, y, z);\n\n        var deltaRho = (getLaguerrePolynomial(n, l)(rho + delta / 2) - getLaguerrePolynomial(n, l)(rho - delta / 2)) / (delta);\n        var deltaTheta = (getLegendrePolynomial(l, m)(theta + delta / 2) - getLegendrePolynomial(l, m)(theta - delta / 2)) / (delta * rho);\n        var deltaPhi = (getSphericalHarmonic(l, m)(phi + delta / 2) - getSphericalHarmonic(l, m)(phi - delta / 2)) / (delta * rho * Math.sin(theta));\n\n        var unitRho = [Math.sin(theta) * Math.cos(phi), Math.sin(theta) * Math.sin(phi), Math.cos(theta)];\n        var unitTheta = [Math.cos(theta) * Math.cos(phi), Math.cos(theta) * Math.sin(phi), Math.sin(theta) * -1];\n        var unitPhi = [Math.sin(phi) * -1, Math.cos(phi), 0];\n\n        return [\n            unitRho[0] * deltaRho + unitTheta[0] * deltaTheta + unitPhi[0] * deltaPhi,\n            unitRho[1] * deltaRho + unitTheta[1] * deltaTheta + unitPhi[1] * deltaPhi,\n            unitRho[2] * deltaRho + unitTheta[2] * deltaTheta + unitPhi[2] * deltaPhi,\n        ];\n    }\n}\n\nfunction getEnergyLevel(n) {\n    return 1 / (n * n);\n}\n\n\nclass Particle {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    move(dx, dy, dz) {\n        this.x += dx;\n        this.y += dy;\n        this.z = dz;\n    }\n}\n\n\nconst Atom = class {\n    constructor (props) {\n        this.superposition = props.superposition;\n        this.particleCount = props.particleCount;\n        this.boxSize = props.boxSize;\n\n        this.particles = [];\n        while (this.particles.length < props.particleCount) {\n            var newParticle = new Particle(\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n            )\n            if (coinFlip(this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z))) {\n                this.particles.push(newParticle);\n            }\n        }\n        console.log(this.particles);\n    }\n\n    getWavefunction(x, y, z, t) {\n        var total = 0;\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = Math.exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            total += phase * this.superposition[i].weight * getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n        }\n        return total\n    }\n\n    getProbabilityDistribution(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = complex.conjugate(wavefunction);\n        return wavefunction * wavefunctionC;    \n    }\n\n    getWaveFunctionGradient(x, y, z, t) {\n        var total = [0, 0, 0];\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = Math.exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            var grad = phase * this.superposition[i].weight * getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n            total[0] += grad[0];\n            total[1] += grad[1];\n            total[2] += grad[2];\n        }\n        return total;\n    }\n    \n    getVelocity(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = complex.conjugate(wavefunction);\n        var gradient = this.getWavefunctionGradient(x, y, z, t);\n        var gradientC = [\n            complex.conjugate(gradient[0]), \n            complex.conjugate(gradient[1]),\n            complex.conjugate(gradient[2]),\n        ]\n        var velocity = [\n            (wavefunction * gradientC[0] - wavefunctionC * gradient[0]) / (wavefunction * wavefunctionC),\n            (wavefunction * gradientC[1] - wavefunctionC * gradient[1]) / (wavefunction * wavefunctionC),\n            (wavefunction * gradientC[2] - wavefunctionC * gradient[2]) / (wavefunction * wavefunctionC),\n        ]\n        return velocity;\n    }\n\n    update(increment) {\n        for (var i = 0; i < this.particles.length; i++) {\n            var p = this.particles[i];\n            var velocity = this.getVelocity(p.x, p.y, p.z);\n            p.move(velocity[0], velocity[1], velocity[2]);\n        }\n        this.timer += increment;\n\n        var p = this.particles[0];\n        var velocity = this.getVelocity(p.x, p.y, p.z);\n        console.log(velocity);\n        return this;\n    }\n}\n\nexport default Atom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}