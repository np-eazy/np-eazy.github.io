{"ast":null,"code":"import { coinFlip, randRange } from '../../../utils/functions';\nimport { complex, conjugate, sqrt, exp, atan, sin, cos, acos, pow, add, subtract, multiply, divide } from 'mathjs';\nconst A0 = 1;\nfunction getFactorial(n) {\n  var soln = 1;\n  for (var i = 0; i < n; i++) {\n    soln *= i + 1;\n  }\n  return soln;\n}\nfunction mapToSpherical(x, y, z) {\n  var rho = sqrt(x * x + y * y + z * z);\n  var theta = atan(y / x);\n  var phi = acos(z / rho);\n  return [rho, theta, phi];\n}\nfunction getNormalization(n, l) {\n  var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n  var radius = rho => 2 * rho / (n * A0);\n  return rho => constTerm * exp(radius(rho) / -2) * pow(radius(rho), l);\n}\nfunction getLaguerrePolynomial(n, l) {\n  var a = 2 * l + 1;\n  var k = n - l - 1;\n  var memoTable = Array(n);\n  memoTable[0] = rho => 1;\n  memoTable[1] = rho => 1 + a - rho;\n  for (var i = 2; i < n; i++) {\n    memoTable[i] = rho => {\n      var leftTerm = (2 * k + a - rho) * memoTable[i - 1](rho);\n      var rightTerm = (k - a - 1) * memoTable[i - 2](rho);\n      return (leftTerm - rightTerm) / k;\n    };\n  }\n  return rho => memoTable[n - 1](rho) * getNormalization(n, l)(rho);\n}\nfunction getLegendrePolynomial(l, m) {\n  var memoTable = Array(l);\n  memoTable[0] = x => 1;\n  memoTable[1] = x => x;\n  for (var i = 2; i < l; i++) {\n    memoTable[i] = x => {\n      var leftTerm = x * (2 * l - 1) * memoTable[i - 1](x);\n      var rightTerm = (l + m - 1) * memoTable[i - 2](x);\n      return (leftTerm - rightTerm) / (l - m);\n    };\n  }\n  return memoTable[l - 1];\n}\nfunction getSphericalHarmonic(l, m) {\n  var sign = complex(m % 2 == 0 ? 1 : -1, 0);\n  var normalization = complex(sqrt(getFactorial(l - m) * (2 * l + 1) / (getFactorial(l + m) * 4 * Math.PI)), 0);\n  var complexTerm = phi => exp(complex(0, m * phi));\n  return phi => multiply(sign, normalization, complexTerm(phi));\n}\nfunction getFunctional(n, l, m) {\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n  };\n}\nfunction getGradient(n, l, m) {\n  var delta = 0.01;\n  // TODO: Explicitly calculate functions for less computational load\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    var deltaRho = divide(subtract(getLaguerrePolynomial(n, l)(rho + delta / 2), getLaguerrePolynomial(n, l)(rho - delta / 2)), delta);\n    var deltaTheta = divide(subtract(getLegendrePolynomial(l, m)(theta + delta / 2), getLegendrePolynomial(l, m)(theta - delta / 2)), delta * rho);\n    var deltaPhi = divide(subtract(getSphericalHarmonic(l, m)(phi + delta / 2), getSphericalHarmonic(l, m)(phi - delta / 2)), delta * rho * Math.sin(theta));\n    console.log(deltaRho, deltaTheta, deltaPhi);\n    var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n    var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n    var unitPhi = [sin(phi) * -1, cos(phi), 0];\n    return [add(multiply(unitRho[0], deltaRho), multiply(unitTheta[0], deltaTheta), multiply(unitPhi[0], deltaPhi)), add(multiply(unitRho[1], deltaRho), multiply(unitTheta[1], deltaTheta), multiply(unitPhi[1], deltaPhi)), add(multiply(unitRho[2], deltaRho), multiply(unitTheta[2], deltaTheta), multiply(unitPhi[0], deltaPhi))];\n  };\n}\nfunction getEnergyLevel(n) {\n  return 1 / (n * n);\n}\nclass Particle {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  move(dx, dy, dz) {\n    this.x += dx;\n    this.y += dy;\n    this.z = dz;\n  }\n}\nconst Atom = class {\n  constructor(props) {\n    this.superposition = props.superposition;\n    this.particleCount = props.particleCount;\n    this.boxSize = props.boxSize;\n    this.timer = 0;\n    this.particles = [];\n    while (this.particles.length < props.particleCount) {\n      var newParticle = new Particle(randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize));\n      if (true || coinFlip(this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z))) {\n        this.particles.push(newParticle);\n      }\n    }\n    console.log(this.timer);\n  }\n  getWavefunction(x, y, z, t) {\n    var total = 0;\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      console.log(t);\n      //console.log(getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z));\n\n      total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n    }\n    return total;\n  }\n  getProbabilityDistribution(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    return wavefunction * wavefunctionC;\n  }\n  getWavefunctionGradient(x, y, z, t) {\n    var total = [0, 0, 0];\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      var grad = phase * this.superposition[i].weight * getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n      total[0] += grad[0];\n      total[1] += grad[1];\n      total[2] += grad[2];\n    }\n    return total;\n  }\n  getVelocity(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    var gradient = this.getWavefunctionGradient(x, y, z, t);\n    var gradientC = [gradient[0].conjugate(), gradient[1].conjugate(), gradient[2].conjugate()];\n    var velocity = [(wavefunction * gradientC[0] - wavefunctionC * gradient[0]) / (wavefunction * wavefunctionC), (wavefunction * gradientC[1] - wavefunctionC * gradient[1]) / (wavefunction * wavefunctionC), (wavefunction * gradientC[2] - wavefunctionC * gradient[2]) / (wavefunction * wavefunctionC)];\n    return velocity;\n  }\n  update(increment) {\n    for (var i = 0; i < this.particles.length; i++) {\n      var p = this.particles[i];\n      var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n      p.move(velocity[0], velocity[1], velocity[2]);\n    }\n    this.timer += increment;\n    var p = this.particles[0];\n    var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n    console.log(velocity);\n    return this;\n  }\n};\nexport default Atom;","map":{"version":3,"names":["coinFlip","randRange","complex","conjugate","sqrt","exp","atan","sin","cos","acos","pow","add","subtract","multiply","divide","A0","getFactorial","n","soln","i","mapToSpherical","x","y","z","rho","theta","phi","getNormalization","l","constTerm","radius","getLaguerrePolynomial","a","k","memoTable","Array","leftTerm","rightTerm","getLegendrePolynomial","m","getSphericalHarmonic","sign","normalization","Math","PI","complexTerm","getFunctional","sphericals","getGradient","delta","deltaRho","deltaTheta","deltaPhi","console","log","unitRho","unitTheta","unitPhi","getEnergyLevel","Particle","constructor","move","dx","dy","dz","Atom","props","superposition","particleCount","boxSize","timer","particles","length","newParticle","getProbabilityDistribution","push","getWavefunction","t","total","phase","weight","wavefunction","wavefunctionC","getWavefunctionGradient","grad","getVelocity","gradient","gradientC","velocity","update","increment","p"],"sources":["/Users/joeyzhu/Projects/joey-j-zhu.github.io/src/components/fold/fold-graphics/atom.js"],"sourcesContent":["import { coinFlip, randRange, } from '../../../utils/functions';\nimport { complex, conjugate, sqrt, exp, atan, sin, cos, acos, pow, add, subtract, multiply, divide } from 'mathjs';\n\n\nconst A0 = 1;\n\nfunction getFactorial(n) {\n    var soln = 1;\n    for (var i = 0; i < n; i++) {\n        soln *= i + 1;\n    }\n    return soln;\n}\n\nfunction mapToSpherical(x, y, z) {\n    var rho = sqrt(x * x + y * y + z * z);\n    var theta = atan(y / x);\n    var phi = acos(z / rho);\n    return [rho, theta, phi];\n}\n\nfunction getNormalization(n, l) {\n    var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n    var radius = (rho) => (2 * rho) / (n * A0);\n    return (rho) => constTerm * exp(radius(rho) / -2) * pow(radius(rho), l);\n}\n\n\nfunction getLaguerrePolynomial(n, l) {\n    var a = 2 * l + 1;\n    var k = n - l - 1;\n    var memoTable = Array(n);\n    memoTable[0] = (rho) => 1;\n    memoTable[1] = (rho) => (1 + a - rho);\n    for (var i = 2; i < n; i++) {\n        memoTable[i] = (rho) => {\n            var leftTerm = (2 * k + a - rho) * memoTable[i - 1](rho);\n            var rightTerm = (k - a - 1) * memoTable[i - 2](rho);\n            return (leftTerm - rightTerm) / k;\n        }\n    }\n    return (rho) => memoTable[n - 1](rho) * getNormalization(n, l)(rho);\n}\n\nfunction getLegendrePolynomial(l, m) {\n    var memoTable = Array(l);\n    memoTable[0] = (x) => 1;\n    memoTable[1] = (x) => x;\n    for (var i = 2; i < l; i++) {\n        memoTable[i] = (x) => {\n            var leftTerm = x * (2 * l - 1) * memoTable[i - 1](x);\n            var rightTerm = (l + m - 1) * memoTable[i - 2](x);\n            return (leftTerm - rightTerm) / (l - m);\n        }\n    }\n    return memoTable[l - 1];\n}\n\nfunction getSphericalHarmonic(l, m) {\n    var sign = complex(m % 2 == 0 ? 1 : -1, 0);\n    var normalization = complex(sqrt((getFactorial(l - m) * (2 * l + 1)) / (getFactorial(l + m) * 4 * Math.PI)), 0);\n    var complexTerm = (phi) => exp(complex(0, m * phi));\n\n    return (phi) => multiply(sign, normalization, complexTerm(phi));\n}\n\nfunction getFunctional(n, l, m) {\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n        \n        return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n    };\n}\n\nfunction getGradient(n, l, m) {\n    var delta = 0.01;\n    // TODO: Explicitly calculate functions for less computational load\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n\n        var deltaRho = divide(subtract(getLaguerrePolynomial(n, l)(rho + delta / 2), getLaguerrePolynomial(n, l)(rho - delta / 2)), (delta));\n        var deltaTheta = divide(subtract(getLegendrePolynomial(l, m)(theta + delta / 2), getLegendrePolynomial(l, m)(theta - delta / 2)), (delta * rho));\n        var deltaPhi = divide(subtract(getSphericalHarmonic(l, m)(phi + delta / 2), getSphericalHarmonic(l, m)(phi - delta / 2)), (delta * rho * Math.sin(theta)));\n\n        console.log(deltaRho, deltaTheta, deltaPhi);\n        var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n        var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n        var unitPhi = [sin(phi) * -1, cos(phi), 0];\n\n        return [\n            add(multiply(unitRho[0], deltaRho), multiply(unitTheta[0], deltaTheta), multiply(unitPhi[0], deltaPhi)),\n            add(multiply(unitRho[1], deltaRho), multiply(unitTheta[1], deltaTheta), multiply(unitPhi[1], deltaPhi)),\n            add(multiply(unitRho[2], deltaRho), multiply(unitTheta[2], deltaTheta), multiply(unitPhi[0], deltaPhi)),\n        ];\n    }\n}\n\nfunction getEnergyLevel(n) {\n    return 1 / (n * n);\n}\n\n\nclass Particle {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    move(dx, dy, dz) {\n        this.x += dx;\n        this.y += dy;\n        this.z = dz;\n    }\n}\n\n\nconst Atom = class {\n    constructor (props) {\n        this.superposition = props.superposition;\n        this.particleCount = props.particleCount;\n        this.boxSize = props.boxSize;\n        this.timer = 0;\n\n        this.particles = [];\n        \n        while (this.particles.length < props.particleCount) {\n            var newParticle = new Particle(\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n            );\n            if (true || coinFlip(this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z))) {\n                this.particles.push(newParticle);\n            }\n        }\n        console.log(this.timer);\n    }\n\n    getWavefunction(x, y, z, t) {\n        var total = 0;\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            \n            console.log(t);\n            //console.log(getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z));\n\n            total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n        }\n        return total;\n    }\n\n    getProbabilityDistribution(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        return wavefunction * wavefunctionC;    \n    }\n\n    getWavefunctionGradient(x, y, z, t) {\n        var total = [0, 0, 0];\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            var grad = phase * this.superposition[i].weight * getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n            total[0] += grad[0];\n            total[1] += grad[1];\n            total[2] += grad[2];\n        }\n        return total;\n    }\n    \n    getVelocity(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        var gradient = this.getWavefunctionGradient(x, y, z, t);\n        var gradientC = [\n            gradient[0].conjugate(), \n            gradient[1].conjugate(), \n            gradient[2].conjugate(), \n        ]\n        var velocity = [\n            (wavefunction * gradientC[0] - wavefunctionC * gradient[0]) / (wavefunction * wavefunctionC),\n            (wavefunction * gradientC[1] - wavefunctionC * gradient[1]) / (wavefunction * wavefunctionC),\n            (wavefunction * gradientC[2] - wavefunctionC * gradient[2]) / (wavefunction * wavefunctionC),\n        ]\n        return velocity;\n    }\n\n    update(increment) {\n        for (var i = 0; i < this.particles.length; i++) {\n            var p = this.particles[i];\n            var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n            p.move(velocity[0], velocity[1], velocity[2]);\n        }\n        this.timer += increment;\n\n        var p = this.particles[0];\n        var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n        console.log(velocity);\n        return this;\n    }\n}\n\nexport default Atom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}