{"ast":null,"code":"import { coinFlip, randRange } from '../../../utils/functions';\nconst A0 = 1;\nfunction getFactorial(n) {\n  var soln = 1;\n  for (var i = 0; i < n; i++) {\n    soln *= i + 1;\n  }\n  return soln;\n}\nfunction mapToSpherical(x, y, z) {\n  var rho = Math.sqrt(x * x + y * y + z * z);\n  var theta = Math.atan(y / x);\n  var phi = Math.acos(z / rho);\n  return rho, theta, phi;\n}\nfunction getNormalization(n, l) {\n  var constTerm = Math.sqrt(Math.pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n  var radius = rho => 2 * rho / (n * A0);\n  return rho => constTerm * Math.exp(radius(rho) / -2) * Math.pow(radius(rho), l);\n}\nfunction getLaguerrePolynomial(n, l) {\n  var a = 2 * l + 1;\n  var k = n - l - 1;\n  var memoTable = Array(n);\n  memoTable[0] = rho => 1;\n  memoTable[1] = rho => 1 + a - rho;\n  for (var i = 2; i < n; i++) {\n    memoTable[i] = rho => {\n      var leftTerm = (2 * k + a - rho) * memoTable[i - 1](rho);\n      var rightTerm = (k - a - 1) * memoTable[i - 2](rho);\n      return (leftTerm - rightTerm) / k;\n    };\n  }\n  return rho => memoTable[n - 1](rho) * getNormalization(n, l)(rho);\n}\nfunction getLegendre(l, m) {\n  var memoTable = Array(l);\n  memoTable[0] = x => 1;\n  memoTable[1] = x => x;\n  for (var i = 2; i < l; i++) {\n    memoTable[i] = x => {\n      var leftTerm = x * (2 * l - 1) * memoTable[i - 1](x);\n      var rightTerm = (l + m - 1) * memoTable[i - 2](x);\n      return (leftTerm - rightTerm) / (l - m);\n    };\n  }\n  return memoTable[l - 1];\n}\nfunction getLegendrePolynomial(l, m) {\n  var memoTable = Array(l);\n  memoTable[0] = x => 1;\n  memoTable[1] = x => x;\n  for (var i = 2; i < l; i++) {\n    memoTable[i] = x => {\n      var leftTerm = x * (2 * l - 1) * memoTable[i - 1](x);\n      var rightTerm = (l + m - 1) * memoTable[i - 2](x);\n      return (leftTerm - rightTerm) / (l - m);\n    };\n  }\n  return memoTable[l - 1];\n}\nfunction getSphericalHarmonic(l, m) {\n  var sign = m % 2 == 0 ? 1 : -1;\n  var normalization = Math.sqrt(getFactorial(l - m) * (2 * l + 1) / (getFactorial(l + m) * 4 * Math.PI));\n  var exponent = phi => Math.exp(Math.complex(0, m * phi));\n  return phi => sign * normalization * exponent(phi);\n}\nfunction getFunctional(n, l, m) {\n  return (x, y, z) => {\n    var rho,\n      theta,\n      phi = mapToSpherical(x, y, z);\n    return getLaguerrePolynomial(n, l)(rho) * getLegendrePolynomial(l, m)(Math.cos(theta)) * getSphericalHarmonic(l, m)(theta, phi);\n  };\n}\nfunction getGradient(n, l, m) {\n  var rhoTerm = getLaguerrePolynomial(n, l);\n  var delta = 0.01;\n  // TODO: Explicitly calculate functions for less computational load\n  return (x, y, z) => {\n    var rho,\n      theta,\n      phi = mapToSpherical(x, y, z);\n    var deltaRho = (getLaguerrePolynomial(n, l)(rho + delta / 2) - getLaguerrePolynomial(n, l)(rho - delta / 2)) / delta;\n    var deltaTheta = (getLegendrePolynomial(l, m)(theta + delta / 2) - getLegendrePolynomial(l, m)(theta - delta / 2)) / (delta * rho);\n    var deltaPhi = (getSphericalHarmonic(l, m)(phi + delta / 2) - getSphericalHarmonic(l, m)(phi - delta / 2)) / (delta * rho * Math.sin(theta));\n    var unitRho = [Math.sin(theta) * Math.cos(phi), Math.sin(theta) * Math.sin(phi), Math.cos(theta)];\n    var unitTheta = [Math.cos(theta) * Math.cos(phi), Math.cos(theta) * Math.sin(phi), Math.sin(theta) * -1];\n    var unitPhi = [Math.sin(phi) * -1, Math.cos(phi), 0];\n    return [unitRho[0] * deltaRho + unitTheta[0] * deltaTheta + unitPhi[0] * deltaPhi, unitRho[1] * deltaRho + unitTheta[1] * deltaTheta + unitPhi[1] * deltaPhi, unitRho[2] * deltaRho + unitTheta[2] * deltaTheta + unitPhi[2] * deltaPhi];\n  };\n}\nfunction getEnergyLevel(n) {\n  return 1 / (n * n);\n}\nclass Particle {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  move(dx, dy, dz) {\n    this.x += dx;\n    this.y += dy;\n    this.z = dz;\n  }\n}\nconst Atom = class {\n  constructor(props) {\n    this.superposition = props.superposition;\n    this.particleCount = props.particleCount;\n    this.boxSize = props.boxSize;\n    this.particles = [];\n    while (this.particles.length < props.particleCount) {\n      var newParticle = new Particle(randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize));\n      if (coinFlip(getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z))) {\n        this.particles.push(newParticle);\n      }\n    }\n  }\n  getWavefunction(x, y, z, t) {\n    var total = 0;\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = Math.exp(Math.complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      total += phase * this.superposition[i].weight * getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n    }\n    return total;\n  }\n  getProbabilityDistribution(x, y, z, t) {\n    var wavefunction = getWavefunction(x, y, z, t);\n    var wavefunctionC = Math.complex.conjugate(wavefunction);\n    return wavefunction * wavefunctionC;\n  }\n  getWaveFunctionGradient(x, y, z, t) {\n    var total = [0, 0, 0];\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = Math.exp(Math.complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      var grad = phase * this.superposition[i].weight * getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n      total[0] += grad[0];\n      total[1] += grad[1];\n      total[2] += grad[2];\n    }\n    return total;\n  }\n  getVelocity(x, y, z, t) {\n    var wavefunction = getWavefunction(x, y, z, t);\n    var wavefunctionC = Math.complex.conjugate(wavefunction);\n    var gradient = getWavefunctionGradient(x, y, z, t);\n    var gradientC = [Math.complex.conjugate(gradient[0]), Math.complex.conjugate(gradient[1]), Math.complex.conjugate(gradient[2])];\n    var velocity = [(wavefunction * gradientC[0] - wavefunctionC * gradient[0]) / (wavefunction * wavefunctionC), (wavefunction * gradientC[1] - wavefunctionC * gradient[1]) / (wavefunction * wavefunctionC), (wavefunction * gradientC[2] - wavefunctionC * gradient[2]) / (wavefunction * wavefunctionC)];\n    return velocity;\n  }\n  update(increment) {\n    for (var i = 0; i < this.particles.length; i++) {\n      var p = this.particles[i];\n      var velocity = getVelocity(p.x, p.y, p.z);\n      p.move(velocity[0], velocity[1], velocity[2]);\n    }\n    this.timer += increment;\n    return this;\n  }\n};\nexport default Atom;","map":{"version":3,"names":["coinFlip","randRange","A0","getFactorial","n","soln","i","mapToSpherical","x","y","z","rho","Math","sqrt","theta","atan","phi","acos","getNormalization","l","constTerm","pow","radius","exp","getLaguerrePolynomial","a","k","memoTable","Array","leftTerm","rightTerm","getLegendre","m","getLegendrePolynomial","getSphericalHarmonic","sign","normalization","PI","exponent","complex","getFunctional","cos","getGradient","rhoTerm","delta","deltaRho","deltaTheta","deltaPhi","sin","unitRho","unitTheta","unitPhi","getEnergyLevel","Particle","constructor","move","dx","dy","dz","Atom","props","superposition","particleCount","boxSize","particles","length","newParticle","getProbabilityDistribution","push","getWavefunction","t","total","phase","weight","wavefunction","wavefunctionC","conjugate","getWaveFunctionGradient","grad","getVelocity","gradient","getWavefunctionGradient","gradientC","velocity","update","increment","p","timer"],"sources":["/Users/joeyzhu/Projects/joey-j-zhu.github.io/src/components/fold/fold-graphics/atom.js"],"sourcesContent":["import { coinFlip, randRange, } from '../../../utils/functions';\n\nconst A0 = 1;\n\nfunction getFactorial(n) {\n    var soln = 1;\n    for (var i = 0; i < n; i++) {\n        soln *= i + 1;\n    }\n    return soln;\n}\n\nfunction mapToSpherical(x, y, z) {\n    var rho = Math.sqrt(x * x + y * y + z * z);\n    var theta = Math.atan(y / x);\n    var phi = Math.acos(z / rho);\n    return (rho, theta, phi);\n}\n\nfunction getNormalization(n, l) {\n    var constTerm = Math.sqrt(Math.pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n    var radius = (rho) => (2 * rho) / (n * A0);\n    return (rho) => constTerm * Math.exp(radius(rho) / -2) * Math.pow(radius(rho), l);\n}\n\n\nfunction getLaguerrePolynomial(n, l) {\n    var a = 2 * l + 1;\n    var k = n - l - 1;\n    var memoTable = Array(n);\n    memoTable[0] = (rho) => 1;\n    memoTable[1] = (rho) => (1 + a - rho);\n    for (var i = 2; i < n; i++) {\n        memoTable[i] = (rho) => {\n            var leftTerm = (2 * k + a - rho) * memoTable[i - 1](rho);\n            var rightTerm = (k - a - 1) * memoTable[i - 2](rho);\n            return (leftTerm - rightTerm) / k;\n        }\n    }\n    return (rho) => memoTable[n - 1](rho) * getNormalization(n, l)(rho);\n}\n\nfunction getLegendre(l, m) {\n    var memoTable = Array(l);\n    memoTable[0] = (x) => 1;\n    memoTable[1] = (x) => x;\n    for (var i = 2; i < l; i++) {\n        memoTable[i] = (x) => {\n            var leftTerm = x * (2 * l - 1) * memoTable[i - 1](x);\n            var rightTerm = (l + m - 1) * memoTable[i - 2](x);\n            return (leftTerm - rightTerm) / (l - m);\n        }\n    }\n    return memoTable[l - 1];\n}\n\nfunction getLegendrePolynomial(l, m) {\n    var memoTable = Array(l);\n    memoTable[0] = (x) => 1;\n    memoTable[1] = (x) => x;\n    for (var i = 2; i < l; i++) {\n        memoTable[i] = (x) => {\n            var leftTerm = x * (2 * l - 1) * memoTable[i - 1](x);\n            var rightTerm = (l + m - 1) * memoTable[i - 2](x);\n            return (leftTerm - rightTerm) / (l - m);\n        }\n    }\n    return memoTable[l - 1];\n}\n\nfunction getSphericalHarmonic(l, m) {\n    var sign = m % 2 == 0 ? 1 : -1;\n    var normalization = Math.sqrt((getFactorial(l - m) * (2 * l + 1)) / (getFactorial(l + m) * 4 * Math.PI));\n    var exponent = (phi) => Math.exp(Math.complex(0, m * phi));\n\n    return (phi) => (sign * normalization * exponent(phi));\n}\n\n\nfunction getFunctional(n, l, m) {\n    return (x, y, z) => {\n        var rho, theta, phi = mapToSpherical(x, y, z);\n        return getLaguerrePolynomial(n, l)(rho) * getLegendrePolynomial(l, m)(Math.cos(theta)) * getSphericalHarmonic(l, m)(theta, phi);\n    };\n}\n\nfunction getGradient(n, l, m) {\n    var rhoTerm = getLaguerrePolynomial(n, l);\n    var delta = 0.01;\n    // TODO: Explicitly calculate functions for less computational load\n    return (x, y, z) => {\n        var rho, theta, phi = mapToSpherical(x, y, z);\n\n        var deltaRho = (getLaguerrePolynomial(n, l)(rho + delta / 2) - getLaguerrePolynomial(n, l)(rho - delta / 2)) / (delta);\n        var deltaTheta = (getLegendrePolynomial(l, m)(theta + delta / 2) - getLegendrePolynomial(l, m)(theta - delta / 2)) / (delta * rho);\n        var deltaPhi = (getSphericalHarmonic(l, m)(phi + delta / 2) - getSphericalHarmonic(l, m)(phi - delta / 2)) / (delta * rho * Math.sin(theta));\n\n        var unitRho = [Math.sin(theta) * Math.cos(phi), Math.sin(theta) * Math.sin(phi), Math.cos(theta)];\n        var unitTheta = [Math.cos(theta) * Math.cos(phi), Math.cos(theta) * Math.sin(phi), Math.sin(theta) * -1];\n        var unitPhi = [Math.sin(phi) * -1, Math.cos(phi), 0];\n\n        return [\n            unitRho[0] * deltaRho + unitTheta[0] * deltaTheta + unitPhi[0] * deltaPhi,\n            unitRho[1] * deltaRho + unitTheta[1] * deltaTheta + unitPhi[1] * deltaPhi,\n            unitRho[2] * deltaRho + unitTheta[2] * deltaTheta + unitPhi[2] * deltaPhi,\n        ];\n    }\n}\n\nfunction getEnergyLevel(n) {\n    return 1 / (n * n);\n}\n\n\nclass Particle {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    move(dx, dy, dz) {\n        this.x += dx;\n        this.y += dy;\n        this.z = dz;\n    }\n}\n\n\nconst Atom = class {\n    constructor (props) {\n        this.superposition = props.superposition;\n        this.particleCount = props.particleCount;\n        this.boxSize = props.boxSize;\n\n        this.particles = [];\n        while (this.particles.length < props.particleCount) {\n            var newParticle = new Particle(\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n            )\n            if (coinFlip(getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z))) {\n                this.particles.push(newParticle);\n            }\n        }\n    }\n\n    getWavefunction(x, y, z, t) {\n        var total = 0;\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = Math.exp(Math.complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            total += phase * this.superposition[i].weight * getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n        }\n        return total\n    }\n\n    getProbabilityDistribution(x, y, z, t) {\n        var wavefunction = getWavefunction(x, y, z, t);\n        var wavefunctionC = Math.complex.conjugate(wavefunction);\n        return wavefunction * wavefunctionC;    \n    }\n\n    getWaveFunctionGradient(x, y, z, t) {\n        var total = [0, 0, 0];\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = Math.exp(Math.complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            var grad = phase * this.superposition[i].weight * getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n            total[0] += grad[0];\n            total[1] += grad[1];\n            total[2] += grad[2];\n        }\n        return total;\n    }\n    \n    getVelocity(x, y, z, t) {\n        var wavefunction = getWavefunction(x, y, z, t);\n        var wavefunctionC = Math.complex.conjugate(wavefunction);\n        var gradient = getWavefunctionGradient(x, y, z, t);\n        var gradientC = [\n            Math.complex.conjugate(gradient[0]), \n            Math.complex.conjugate(gradient[1]),\n            Math.complex.conjugate(gradient[2]),\n        ]\n        var velocity = [\n            (wavefunction * gradientC[0] - wavefunctionC * gradient[0]) / (wavefunction * wavefunctionC),\n            (wavefunction * gradientC[1] - wavefunctionC * gradient[1]) / (wavefunction * wavefunctionC),\n            (wavefunction * gradientC[2] - wavefunctionC * gradient[2]) / (wavefunction * wavefunctionC),\n        ]\n        return velocity;\n    }\n\n    update(increment) {\n        for (var i = 0; i < this.particles.length; i++) {\n            var p = this.particles[i];\n            var velocity = getVelocity(p.x, p.y, p.z);\n            p.move(velocity[0], velocity[1], velocity[2]);\n        }\n        this.timer += increment;\n        return this;\n    }\n}\n\nexport default Atom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}