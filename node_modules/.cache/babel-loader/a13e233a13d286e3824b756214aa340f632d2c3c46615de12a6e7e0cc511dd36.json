{"ast":null,"code":"import { coinFlip, randRange } from '../../../utils/functions';\nimport { complex, sqrt, exp, sin, cos, add, subtract, multiply, divide } from 'mathjs';\nimport { atan, acos, pow } from 'mathjs';\nconst A0 = 1.0;\nconst factorials = [];\nvar total = 1;\nfor (var i = 0; i < 10; i++) {\n  total *= i + 1;\n  factorials.push(total);\n}\nexport function getFactorial(n) {\n  if (n <= 0) {\n    return 1;\n  } else if (n <= 10) {\n    return factorials[n - 1];\n  } else {\n    var soln = 1;\n    for (var i = 0; i < n; i++) {\n      soln *= i + 1;\n    }\n    return soln;\n  }\n}\n;\nexport function getDoubleFactorial(n) {\n  if (n <= 0) {\n    return 1;\n  } else {\n    var soln = 1;\n    for (var i = 0; i < n; i++) {\n      if (i + 1 % 2 == n % 2) {\n        soln *= i + 1;\n      }\n    }\n    return soln;\n  }\n}\n;\nexport function choose(n, k) {\n  return getFactorial(n) / (getFactorial(n - k) * getFactorial(k));\n}\n;\nexport function mapToSpherical(x, y, z) {\n  var rho = sqrt(x * x + y * y + z * z);\n  var theta = atan(y / x);\n  var phi = acos(z / rho);\n  return [rho, theta, phi];\n}\nexport function getLaguerrePolynomial(n, l) {\n  return rho => {\n    var kl = 2 * l + 1;\n    var nl = n - l - 1;\n    var signedPower = 1;\n    var total = 0;\n    for (var i = 0; i <= n; i++) {\n      total += signedPower * getFactorial(nl + kl) / (getFactorial(nl - i) * getFactorial(kl + i) * getFactorial(i));\n      signedPower *= -rho;\n    }\n    var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n    var radius = 2 * rho / (n * A0);\n    return total * constTerm * exp(radius / -2) * pow(radius, l);\n  };\n}\n;\nexport function getLegendrePolynomial(l, m) {\n  return rho => {\n    var sign = m % 2 == 0 ? 1 : -1;\n    var base = sign * getDoubleFactorial(2 * m - 1) * pow(sqrt(1 - rho * rho), m);\n    var nextBase = (2 * m + 1) * rho * base;\n    if (l - m == 0) {\n      return base;\n    } else if (l - m == 1) {\n      return nextBase;\n    } else if (l - m >= 2) {\n      for (var i = 0; i < l - m - 1; i++) {\n        var nextPolynomial = ((2 * l + 1) * nextBase - (l + m) * base) / (l - m + 1);\n        base = nextBase;\n        nextBase = nextPolynomial;\n      }\n      return nextPolynomial;\n    }\n  };\n  //return (rho) => rho;\n}\n;\nexport function getSphericalHarmonic(l, m) {\n  return phi => {\n    var sign = m % 2 == 0 ? 1 : -1;\n    var normalization = complex(sqrt(getFactorial(l - m) * (2 * l + 1) / (getFactorial(l + m) * 4 * Math.PI)), 0);\n    return multiply(sign, normalization, exp(complex(0, m * phi)));\n  };\n}\n;\nfunction getFunctional(n, l, m) {\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n  };\n}\nfunction getGradient(n, l, m) {\n  var delta = 0.0001;\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    var deltaRho = divide(subtract(getLaguerrePolynomial(n, l)(rho + delta / 2), getLaguerrePolynomial(n, l)(rho - delta / 2)), delta);\n    var deltaTheta = divide(subtract(getLegendrePolynomial(l, m)(theta + delta / 2), getLegendrePolynomial(l, m)(theta - delta / 2)), delta * rho);\n    var deltaPhi = divide(subtract(getSphericalHarmonic(l, m)(phi + delta / 2), getSphericalHarmonic(l, m)(phi - delta / 2)), delta * rho * Math.sin(theta));\n    var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n    var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n    var unitPhi = [sin(phi) * -1, cos(phi), 0.0];\n    return [add(multiply(unitRho[0], deltaRho), multiply(unitTheta[0], deltaTheta), multiply(unitPhi[0], deltaPhi)), add(multiply(unitRho[1], deltaRho), multiply(unitTheta[1], deltaTheta), multiply(unitPhi[1], deltaPhi)), add(multiply(unitRho[2], deltaRho), multiply(unitTheta[2], deltaTheta), multiply(unitPhi[2], deltaPhi))];\n  };\n}\nfunction getEnergyLevel(n) {\n  return 1 / (n * n);\n}\nclass Particle {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  move(dx, dy, dz) {\n    this.x += dx;\n    this.y += dy;\n    this.z += dz;\n  }\n  set(dx, dy, dz) {\n    this.x = dx;\n    this.y = dy;\n    this.z = dz;\n  }\n}\nconst Atom = class {\n  constructor(props) {\n    this.superposition = props.superposition;\n    this.particleCount = props.particleCount;\n    this.boxSize = props.boxSize;\n    this.timer = 0;\n    this.particles = [];\n    while (this.particles.length < props.particleCount) {\n      var newParticle = new Particle(randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize));\n      if (coinFlip(100 * this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z, 0))) {\n        this.particles.push(newParticle);\n      }\n    }\n  }\n  getWavefunction(x, y, z, t) {\n    var total = 0;\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n    }\n    return total;\n  }\n  getProbabilityDistribution(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    return multiply(wavefunction, wavefunctionC);\n  }\n  getWavefunctionGradient(x, y, z, t) {\n    var total = [complex(0, 0), complex(0, 0), complex(0, 0)];\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      var grad = getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n      total[0] = add(total[0], multiply(phase, this.superposition[i].weight, grad[0]));\n      total[1] = add(total[1], multiply(phase, this.superposition[i].weight, grad[1]));\n      total[2] = add(total[2], multiply(phase, this.superposition[i].weight, grad[2]));\n      if (timer == 0) console.log(total);\n    }\n    return total;\n  }\n  getVelocity(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    var gradient = this.getWavefunctionGradient(x, y, z, t);\n    var gradientC = [gradient[0].conjugate(), gradient[1].conjugate(), gradient[2].conjugate()];\n    var velocity = [divide(subtract(multiply(wavefunction, gradientC[0]), multiply(wavefunctionC, gradient[0])), add(1e-8, multiply(wavefunction, wavefunctionC))), divide(subtract(multiply(wavefunction, gradientC[1]), multiply(wavefunctionC, gradient[1])), add(1e-8, multiply(wavefunction, wavefunctionC))), divide(subtract(multiply(wavefunction, gradientC[2]), multiply(wavefunctionC, gradient[2])), add(1e-8, multiply(wavefunction, wavefunctionC)))];\n    if (this.timer == 0) {\n      console.log(wavefunction, gradient, x, y, z, t);\n    }\n    return velocity;\n  }\n  update(increment) {\n    var deltat = 0.005;\n    for (var i = 0; i < this.particles.length; i++) {\n      var p = this.particles[i];\n      var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n      if (this.timer == 0) {\n        console.log(i, velocity, p, this.timer);\n      }\n      var oldNorm = Math.sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n      p.move(velocity[0].im * deltat, velocity[1].im * deltat, velocity[2].im * deltat);\n      if (this.timer == 0) {\n        console.log(velocity, p, this.timer);\n      }\n      var newNorm = Math.sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n      var factor = oldNorm / newNorm - 1;\n      p.move(p.x * factor, p.y * factor, p.z * factor);\n    }\n    this.timer += 1;\n    return this;\n  }\n};\nexport default Atom;","map":{"version":3,"names":["coinFlip","randRange","complex","sqrt","exp","sin","cos","add","subtract","multiply","divide","atan","acos","pow","A0","factorials","total","i","push","getFactorial","n","soln","getDoubleFactorial","choose","k","mapToSpherical","x","y","z","rho","theta","phi","getLaguerrePolynomial","l","kl","nl","signedPower","constTerm","radius","getLegendrePolynomial","m","sign","base","nextBase","nextPolynomial","getSphericalHarmonic","normalization","Math","PI","getFunctional","sphericals","getGradient","delta","deltaRho","deltaTheta","deltaPhi","unitRho","unitTheta","unitPhi","getEnergyLevel","Particle","constructor","move","dx","dy","dz","set","Atom","props","superposition","particleCount","boxSize","timer","particles","length","newParticle","getProbabilityDistribution","getWavefunction","t","phase","weight","wavefunction","wavefunctionC","conjugate","getWavefunctionGradient","grad","console","log","getVelocity","gradient","gradientC","velocity","update","increment","deltat","p","oldNorm","im","newNorm","factor"],"sources":["/Users/joeyzhu/Projects/joey-j-zhu.github.io/src/components/fold/fold-graphics/atom.js"],"sourcesContent":["import { coinFlip, \n    randRange, \n  } from '../../../utils/functions';\nimport { complex, sqrt, exp, sin, cos, add, subtract, multiply, divide } from 'mathjs';\nimport { atan, acos, pow } from 'mathjs';\n\nconst A0 = 1.0;\n\nconst factorials = [];\nvar total = 1;\nfor (var i = 0; i < 10; i++) {\n    total *= i + 1;\n    factorials.push(total);\n}\n\nexport function getFactorial(n) {\n    if (n <= 0) {\n        return 1;\n    } else if (n <= 10) {\n        return factorials[n - 1];\n    } else {\n        var soln = 1;\n        for (var i = 0; i < n; i++) {\n            soln *= i + 1;\n        }\n        return soln;\n    }\n};\n\nexport function getDoubleFactorial(n) {\n    if (n <= 0) {\n        return 1;\n    } else {\n        var soln = 1;\n        for (var i = 0; i < n; i++) {\n            if (i + 1 % 2 == n % 2) {\n                soln *= i + 1;\n            }\n        }\n        return soln;\n    }\n};\n\nexport function choose(n, k) {\n    return getFactorial(n) / (getFactorial(n - k) * getFactorial(k));\n};\n\nexport function mapToSpherical(x, y, z) {\n    var rho = sqrt(x * x + y * y + z * z);\n    var theta = atan(y / x);\n    var phi = acos(z / rho);\n    return [rho, theta, phi];\n}\n\n\nexport function getLaguerrePolynomial(n, l) {\n    return (rho) => {\n        var kl = 2 * l + 1;\n        var nl = n - l - 1;\n        var signedPower = 1;\n        var total = 0;\n        for (var i = 0; i <= n; i++) {\n            total += signedPower * getFactorial(nl + kl) / (getFactorial(nl - i) * getFactorial(kl + i) * getFactorial(i));\n            signedPower *= -rho;\n        }\n        var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n        var radius = (2 * rho) / (n * A0);\n        return total * constTerm * exp(radius / -2) * pow(radius, l);\n    }\n};\n\nexport function getLegendrePolynomial(l, m) {\n    return (rho) => {\n        var sign = m % 2 == 0 ? 1 : -1;\n        var base = sign * getDoubleFactorial(2 * m - 1) * pow(sqrt(1 - rho * rho), m);\n        var nextBase = (2 * m + 1) * rho * base;\n        if (l - m == 0) {\n            return base;\n        } else if (l - m == 1) {\n            return nextBase;\n        } else if (l - m >= 2) {\n            for (var i = 0; i < l - m - 1; i++) {\n                var nextPolynomial = ((2 * l + 1) * nextBase - (l + m) * base) / (l - m + 1);\n                base = nextBase;\n                nextBase = nextPolynomial;\n            }\n            return nextPolynomial;\n        }\n    }\n    //return (rho) => rho;\n};\n\nexport function getSphericalHarmonic(l, m) {\n    return (phi) => {\n        var sign = m % 2 == 0 ? 1 : -1;\n        var normalization = complex(sqrt((getFactorial(l - m) * (2 * l + 1)) / (getFactorial(l + m) * 4 * Math.PI)), 0);\n        return multiply(sign, normalization, exp(complex(0, m * phi)));\n    };\n};\n\nfunction getFunctional(n, l, m) {\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n        \n        return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n    };\n}\n\nfunction getGradient(n, l, m) {\n\n    var delta = 0.0001;\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n\n        var deltaRho = divide(subtract(getLaguerrePolynomial(n, l)(rho + delta / 2), getLaguerrePolynomial(n, l)(rho - delta / 2)), (delta));\n        var deltaTheta = divide(subtract(getLegendrePolynomial(l, m)(theta + delta / 2), getLegendrePolynomial(l, m)(theta - delta / 2)), (delta * rho));\n        var deltaPhi = divide(subtract(getSphericalHarmonic(l, m)(phi + delta / 2), getSphericalHarmonic(l, m)(phi - delta / 2)), (delta * rho * Math.sin(theta)));\n\n        var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n        var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n        var unitPhi = [sin(phi) * -1, cos(phi), 0.0];\n\n        return [\n            add(multiply(unitRho[0], deltaRho), multiply(unitTheta[0], deltaTheta), multiply(unitPhi[0], deltaPhi)),\n            add(multiply(unitRho[1], deltaRho), multiply(unitTheta[1], deltaTheta), multiply(unitPhi[1], deltaPhi)),\n            add(multiply(unitRho[2], deltaRho), multiply(unitTheta[2], deltaTheta), multiply(unitPhi[2], deltaPhi)),\n        ];\n    }\n}\n\nfunction getEnergyLevel(n) {\n    return 1 / (n * n);\n}\n\n\nclass Particle {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    move(dx, dy, dz) {\n        this.x += dx;\n        this.y += dy;\n        this.z += dz;\n    }\n\n    set(dx, dy, dz) {\n        this.x = dx;\n        this.y = dy;\n        this.z = dz;\n    }\n}\n\n\nconst Atom = class {\n    constructor (props) {\n        this.superposition = props.superposition;\n        this.particleCount = props.particleCount;\n        this.boxSize = props.boxSize;\n        this.timer = 0;\n\n        this.particles = [];\n        \n        while (this.particles.length < props.particleCount) {\n            var newParticle = new Particle(\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n            );\n            if (coinFlip(100 * this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z, 0))) {\n                this.particles.push(newParticle);\n            }\n        }\n    }\n\n    getWavefunction(x, y, z, t) {\n        var total = 0;\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n        }\n\n        return total;\n    }\n\n    getProbabilityDistribution(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        return multiply(wavefunction, wavefunctionC);    \n    }\n\n    getWavefunctionGradient(x, y, z, t) {\n        var total = [complex(0, 0), complex(0, 0), complex(0, 0)];\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            var grad = getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n            total[0] = add(total[0], multiply(phase, this.superposition[i].weight, grad[0]));\n            total[1] = add(total[1], multiply(phase, this.superposition[i].weight, grad[1]));\n            total[2] = add(total[2], multiply(phase, this.superposition[i].weight, grad[2]));\n            if (timer == 0)\n            console.log(total);\n        }\n        return total;\n    }\n    \n    getVelocity(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        var gradient = this.getWavefunctionGradient(x, y, z, t);\n        var gradientC = [\n            gradient[0].conjugate(), \n            gradient[1].conjugate(), \n            gradient[2].conjugate(), \n        ];\n        var velocity = [\n            divide(subtract(multiply(wavefunction, gradientC[0]), multiply(wavefunctionC, gradient[0])), add(1e-8, multiply(wavefunction, wavefunctionC))),\n            divide(subtract(multiply(wavefunction, gradientC[1]), multiply(wavefunctionC, gradient[1])), add(1e-8, multiply(wavefunction, wavefunctionC))),\n            divide(subtract(multiply(wavefunction, gradientC[2]), multiply(wavefunctionC, gradient[2])), add(1e-8, multiply(wavefunction, wavefunctionC)))\n        ];\n        if (this.timer == 0) {\n            console.log(wavefunction, gradient, x, y, z, t);\n        }\n        return velocity;\n    }\n\n    update(increment) {\n        var deltat = 0.005;\n        for (var i = 0; i < this.particles.length; i++) {\n            var p = this.particles[i];\n            var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n            if (this.timer == 0) {\n                console.log(i, velocity, p, this.timer);\n            }\n            var oldNorm = Math.sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n            p.move(velocity[0].im * deltat, velocity[1].im * deltat, velocity[2].im * deltat);\n            if (this.timer == 0) {\n                console.log(velocity, p, this.timer);\n            }\n            var newNorm = Math.sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n            var factor = oldNorm / newNorm - 1;  \n            p.move(p.x * factor, p.y * factor, p.z * factor);\n        }\n        this.timer += 1;\n        return this;\n    }\n}\n\nexport default Atom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}