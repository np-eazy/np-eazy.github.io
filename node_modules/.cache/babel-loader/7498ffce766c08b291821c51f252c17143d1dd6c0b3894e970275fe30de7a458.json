{"ast":null,"code":"import { coinFlip, randRange } from '../../../utils/functions';\nimport { complex, sqrt, exp, sin, cos, add, subtract, multiply, divide } from 'mathjs';\nimport { atan, acos, pow } from 'mathjs';\nconst A0 = 1.0;\nconst factorials = [];\nvar total = 1;\nfor (var i = 0; i < 10; i++) {\n  total *= i + 1;\n  factorials.push(total);\n}\nexport function getFactorial(n) {\n  if (n <= 0) {\n    return 1;\n  } else if (n <= 10) {\n    return factorials[n - 1];\n  } else {\n    var soln = 1;\n    for (var i = 0; i < n; i++) {\n      soln *= i + 1;\n    }\n    return soln;\n  }\n}\n;\nexport function getDoubleFactorial(n) {\n  if (n <= 0) {\n    return 1;\n  } else {\n    var soln = 1;\n    for (var i = 0; i < n; i++) {\n      if (i + 1 % 2 == n % 2) {\n        soln *= i + 1;\n      }\n    }\n    return soln;\n  }\n}\n;\nexport function choose(n, k) {\n  return getFactorial(n) / (getFactorial(n - k) * getFactorial(k));\n}\n;\nexport function mapToSpherical(x, y, z) {\n  var rho = sqrt(x * x + y * y + z * z);\n  var theta = atan(y / x);\n  var phi = acos(z / rho);\n  return [rho, theta, phi];\n}\nexport function getLaguerrePolynomial(n, l) {\n  return rho => {\n    var kl = 2 * l + 1;\n    var nl = n - l - 1;\n    var signedPower = 1;\n    var total = 0;\n    for (var i = 0; i <= n; i++) {\n      total += signedPower * getFactorial(nl + kl) / (getFactorial(nl - i) * getFactorial(kl + i) * getFactorial(i));\n      signedPower *= -rho;\n    }\n    var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n    var radius = 2 * rho / (n * A0);\n    return total * constTerm * exp(radius / -2) * pow(radius, l);\n  };\n}\n;\nexport function getLegendrePolynomial(l, m) {\n  // return (rho) => {\n  //     var sign = m % 2 == 0 ? 1 : -1;\n  //     var base = sign * getDoubleFactorial(2 * m - 1) * pow(sqrt(1 - rho * rho), m);\n  //     var nextBase = (2 * m + 1) * rho * base;\n  //     if (l - m == 0) {\n  //         return base;\n  //     } else if (l - m == 1) {\n  //         return nextBase;\n  //     } else if (l - m >= 2) {\n  //         for (var i = 0; i < l - m - 1; i++) {\n  //             var nextPolynomial = ((2 * l + 1) * nextBase - (l + m) * base) / (l - m + 1);\n  //             base = nextBase;\n  //             nextBase = nextPolynomial;\n  //         }\n  //         return nextPolynomial;\n  //     }\n  // }\n  return rho => rho;\n}\n;\nexport function getSphericalHarmonic(l, m) {\n  // return (phi) => {\n  //     var sign = complex(m % 2 == 0 ? 1 : -1, 0);\n  //     var normalization = complex(sqrt((getFactorial(l - m) * (2 * l + 1)) / (getFactorial(l + m) * 4 * Math.PI)), 0);\n  //     return multiply(sign, normalization, exp(complex(0, m * phi))) \n  // };\n  return phi => phi;\n}\n;\nfunction getFunctional(n, l, m) {\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n  };\n}\nfunction getGradient(n, l, m) {\n  var delta = 0.0001;\n  // TODO: Explicitly calculate functions for less computational load\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    var deltaRho = divide(subtract(getLaguerrePolynomial(n, l)(rho + delta / 2), getLaguerrePolynomial(n, l)(rho - delta / 2)), delta);\n    var deltaTheta = divide(subtract(getLegendrePolynomial(l, m)(theta + delta / 2), getLegendrePolynomial(l, m)(theta - delta / 2)), delta * rho);\n    var deltaPhi = divide(subtract(getSphericalHarmonic(l, m)(phi + delta / 2), getSphericalHarmonic(l, m)(phi - delta / 2)), delta * rho * Math.sin(theta));\n    var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n    var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n    var unitPhi = [sin(phi) * -1, cos(phi), 0];\n    return [add(multiply(unitRho[0], deltaRho), multiply(unitTheta[0], deltaTheta), multiply(unitPhi[0], deltaPhi)), add(multiply(unitRho[1], deltaRho), multiply(unitTheta[1], deltaTheta), multiply(unitPhi[1], deltaPhi)), add(multiply(unitRho[2], deltaRho), multiply(unitTheta[2], deltaTheta), multiply(unitPhi[2], deltaPhi))];\n  };\n}\nfunction getEnergyLevel(n) {\n  return 1 / (n * n);\n}\nclass Particle {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.buffer = [];\n  }\n  move(dx, dy, dz) {\n    this.x += dx;\n    this.y += dy;\n    this.z += dz;\n  }\n  set(dx, dy, dz) {\n    this.x = dx;\n    this.y = dy;\n    this.z = dz;\n  }\n}\nconst Atom = class {\n  constructor(props) {\n    this.superposition = props.superposition;\n    this.particleCount = props.particleCount;\n    this.boxSize = props.boxSize;\n    this.timer = 0;\n    this.particles = [];\n    while (this.particles.length < props.particleCount) {\n      var newParticle = new Particle(randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize));\n      if (coinFlip(100 * this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z, 0))) {\n        this.particles.push(newParticle);\n      }\n    }\n  }\n  getWavefunction(x, y, z, t) {\n    var total = 0;\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n    }\n    return total;\n  }\n  getProbabilityDistribution(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    return wavefunction * wavefunctionC;\n  }\n  getWavefunctionGradient(x, y, z, t) {\n    var total = [0, 0, 0];\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      var grad = getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n      total[0] = add(total[0], multiply(phase, this.superposition[i].weight, grad[0]));\n      total[1] = add(total[1], multiply(phase, this.superposition[i].weight, grad[1]));\n      total[2] = add(total[2], multiply(phase, this.superposition[i].weight, grad[2]));\n    }\n    return total;\n  }\n  getVelocity(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    var gradient = this.getWavefunctionGradient(x, y, z, t);\n    var gradientC = [gradient[0].conjugate(), gradient[1].conjugate(), gradient[2].conjugate()];\n    var velocity = [divide(subtract(multiply(wavefunction, gradientC[0]), multiply(wavefunctionC, gradient[0])), multiply(wavefunction, wavefunctionC)), divide(subtract(multiply(wavefunction, gradientC[1]), multiply(wavefunctionC, gradient[1])), multiply(wavefunction, wavefunctionC)), divide(subtract(multiply(wavefunction, gradientC[2]), multiply(wavefunctionC, gradient[2])), multiply(wavefunction, wavefunctionC))];\n    return velocity;\n  }\n  update(increment) {\n    var deltat = 0.005;\n    var p = this.particles[0];\n    for (var i = 0; i < this.particles.length; i++) {\n      var p = this.particles[i];\n      var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n      var oldNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n      p.move(velocity[0].im * deltat, velocity[1].im * deltat, velocity[2].im * deltat);\n      var newNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n      p.set(p.x * oldNorm / newNorm, p.y * oldNorm / newNorm, p.z * oldNorm / newNorm);\n    }\n    this.timer += 10 * deltat;\n    return this;\n  }\n};\nexport default Atom;","map":{"version":3,"names":["coinFlip","randRange","complex","sqrt","exp","sin","cos","add","subtract","multiply","divide","atan","acos","pow","A0","factorials","total","i","push","getFactorial","n","soln","getDoubleFactorial","choose","k","mapToSpherical","x","y","z","rho","theta","phi","getLaguerrePolynomial","l","kl","nl","signedPower","constTerm","radius","getLegendrePolynomial","m","getSphericalHarmonic","getFunctional","sphericals","getGradient","delta","deltaRho","deltaTheta","deltaPhi","Math","unitRho","unitTheta","unitPhi","getEnergyLevel","Particle","constructor","buffer","move","dx","dy","dz","set","Atom","props","superposition","particleCount","boxSize","timer","particles","length","newParticle","getProbabilityDistribution","getWavefunction","t","phase","weight","wavefunction","wavefunctionC","conjugate","getWavefunctionGradient","grad","getVelocity","gradient","gradientC","velocity","update","increment","deltat","p","oldNorm","im","newNorm"],"sources":["/Users/joeyzhu/Projects/joey-j-zhu.github.io/src/components/fold/fold-graphics/atom.js"],"sourcesContent":["import { coinFlip, \n    randRange, \n  } from '../../../utils/functions';\nimport { complex, sqrt, exp, sin, cos, add, subtract, multiply, divide } from 'mathjs';\nimport { atan, acos, pow } from 'mathjs';\n\nconst A0 = 1.0;\n\nconst factorials = [];\nvar total = 1;\nfor (var i = 0; i < 10; i++) {\n    total *= i + 1;\n    factorials.push(total);\n}\n\nexport function getFactorial(n) {\n    if (n <= 0) {\n        return 1;\n    } else if (n <= 10) {\n        return factorials[n - 1];\n    } else {\n        var soln = 1;\n        for (var i = 0; i < n; i++) {\n            soln *= i + 1;\n        }\n        return soln;\n    }\n};\n\nexport function getDoubleFactorial(n) {\n    if (n <= 0) {\n        return 1;\n    } else {\n        var soln = 1;\n        for (var i = 0; i < n; i++) {\n            if (i + 1 % 2 == n % 2) {\n                soln *= i + 1;\n            }\n        }\n        return soln;\n    }\n};\n\nexport function choose(n, k) {\n    return getFactorial(n) / (getFactorial(n - k) * getFactorial(k));\n};\n\nexport function mapToSpherical(x, y, z) {\n    var rho = sqrt(x * x + y * y + z * z);\n    var theta = atan(y / x);\n    var phi = acos(z / rho);\n    return [rho, theta, phi];\n}\n\n\nexport function getLaguerrePolynomial(n, l) {\n    return (rho) => {\n        var kl = 2 * l + 1;\n        var nl = n - l - 1;\n        var signedPower = 1;\n        var total = 0;\n        for (var i = 0; i <= n; i++) {\n            total += signedPower * getFactorial(nl + kl) / (getFactorial(nl - i) * getFactorial(kl + i) * getFactorial(i));\n            signedPower *= -rho;\n        }\n        var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n        var radius = (2 * rho) / (n * A0);\n        return total * constTerm * exp(radius / -2) * pow(radius, l);\n    }\n};\n\nexport function getLegendrePolynomial(l, m) {\n    // return (rho) => {\n    //     var sign = m % 2 == 0 ? 1 : -1;\n    //     var base = sign * getDoubleFactorial(2 * m - 1) * pow(sqrt(1 - rho * rho), m);\n    //     var nextBase = (2 * m + 1) * rho * base;\n    //     if (l - m == 0) {\n    //         return base;\n    //     } else if (l - m == 1) {\n    //         return nextBase;\n    //     } else if (l - m >= 2) {\n    //         for (var i = 0; i < l - m - 1; i++) {\n    //             var nextPolynomial = ((2 * l + 1) * nextBase - (l + m) * base) / (l - m + 1);\n    //             base = nextBase;\n    //             nextBase = nextPolynomial;\n    //         }\n    //         return nextPolynomial;\n    //     }\n    // }\n    return (rho) => rho;\n};\n\nexport function getSphericalHarmonic(l, m) {\n    // return (phi) => {\n    //     var sign = complex(m % 2 == 0 ? 1 : -1, 0);\n    //     var normalization = complex(sqrt((getFactorial(l - m) * (2 * l + 1)) / (getFactorial(l + m) * 4 * Math.PI)), 0);\n    //     return multiply(sign, normalization, exp(complex(0, m * phi))) \n    // };\n    return (phi) => phi;\n};\n\nfunction getFunctional(n, l, m) {\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n        \n        return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n    };\n}\n\nfunction getGradient(n, l, m) {\n\n    var delta = 0.0001;\n    // TODO: Explicitly calculate functions for less computational load\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n\n        var deltaRho = divide(subtract(getLaguerrePolynomial(n, l)(rho + delta / 2), getLaguerrePolynomial(n, l)(rho - delta / 2)), (delta));\n        var deltaTheta = divide(subtract(getLegendrePolynomial(l, m)(theta + delta / 2), getLegendrePolynomial(l, m)(theta - delta / 2)), (delta * rho));\n        var deltaPhi = divide(subtract(getSphericalHarmonic(l, m)(phi + delta / 2), getSphericalHarmonic(l, m)(phi - delta / 2)), (delta * rho * Math.sin(theta)));\n\n        var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n        var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n        var unitPhi = [sin(phi) * -1, cos(phi), 0];\n\n        return [\n            add(multiply(unitRho[0], deltaRho), multiply(unitTheta[0], deltaTheta), multiply(unitPhi[0], deltaPhi)),\n            add(multiply(unitRho[1], deltaRho), multiply(unitTheta[1], deltaTheta), multiply(unitPhi[1], deltaPhi)),\n            add(multiply(unitRho[2], deltaRho), multiply(unitTheta[2], deltaTheta), multiply(unitPhi[2], deltaPhi)),\n        ];\n    }\n}\n\nfunction getEnergyLevel(n) {\n    return 1 / (n * n);\n}\n\n\nclass Particle {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.buffer = [];\n    }\n\n    move(dx, dy, dz) {\n        this.x += dx;\n        this.y += dy;\n        this.z += dz;\n    }\n\n    set(dx, dy, dz) {\n        this.x = dx;\n        this.y = dy;\n        this.z = dz;\n    }\n}\n\n\nconst Atom = class {\n    constructor (props) {\n        this.superposition = props.superposition;\n        this.particleCount = props.particleCount;\n        this.boxSize = props.boxSize;\n        this.timer = 0;\n\n        this.particles = [];\n        \n        while (this.particles.length < props.particleCount) {\n            var newParticle = new Particle(\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n            );\n            if (coinFlip(100 * this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z, 0))) {\n                this.particles.push(newParticle);\n            }\n        }\n    }\n\n    getWavefunction(x, y, z, t) {\n        var total = 0;\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n        }\n        return total;\n    }\n\n    getProbabilityDistribution(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        return wavefunction * wavefunctionC;    \n    }\n\n    getWavefunctionGradient(x, y, z, t) {\n        var total = [0, 0, 0];\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            var grad = getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z);\n            total[0] = add(total[0], multiply(phase, this.superposition[i].weight, grad[0]));\n            total[1] = add(total[1], multiply(phase, this.superposition[i].weight, grad[1]));\n            total[2] = add(total[2], multiply(phase, this.superposition[i].weight, grad[2]));\n        }\n        return total;\n    }\n    \n    getVelocity(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        var gradient = this.getWavefunctionGradient(x, y, z, t);\n        var gradientC = [\n            gradient[0].conjugate(), \n            gradient[1].conjugate(), \n            gradient[2].conjugate(), \n        ];\n        var velocity = [\n            divide(subtract(multiply(wavefunction, gradientC[0]), multiply(wavefunctionC, gradient[0])), multiply(wavefunction, wavefunctionC)),\n            divide(subtract(multiply(wavefunction, gradientC[1]), multiply(wavefunctionC, gradient[1])), multiply(wavefunction, wavefunctionC)),\n            divide(subtract(multiply(wavefunction, gradientC[2]), multiply(wavefunctionC, gradient[2])), multiply(wavefunction, wavefunctionC))\n        ];\n        return velocity;\n    }\n\n    update(increment) {\n        var deltat = 0.005;\n        var p = this.particles[0];\n        for (var i = 0; i < this.particles.length; i++) {\n            var p = this.particles[i];\n            var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n            var oldNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n            p.move(velocity[0].im * deltat, velocity[1].im * deltat, velocity[2].im * deltat);\n            var newNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n            p.set(p.x * oldNorm / newNorm, p.y * oldNorm / newNorm, p.z * oldNorm / newNorm);\n        }\n        this.timer += 10 * deltat;\n        return this;\n    }\n}\n\nexport default Atom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}