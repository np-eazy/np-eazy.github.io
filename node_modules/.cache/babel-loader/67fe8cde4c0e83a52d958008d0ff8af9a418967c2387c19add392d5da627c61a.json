{"ast":null,"code":"import { coinFlip, randRange } from '../../../utils/functions';\nimport { complex, sqrt, exp, sin, cos, add, subtract, multiply, divide } from 'mathjs';\nimport { atan, acos, pow } from 'mathjs';\nconst A0 = 1.0;\nvar runningFactorial = [];\nvar factorial = 1;\nfor (var i = 0; i < 10; i++) {\n  factorial *= i + 1;\n  runningFactorial.push(factorial);\n}\n;\nexport function getFactorial(n) {\n  if (n <= 0) {\n    return 1;\n  } else if (n > 10) {\n    return runningFactorial[n - 1];\n  } else {\n    var soln = 1;\n    for (var i = 0; i < n; i++) {\n      soln *= i + 1;\n    }\n    return soln;\n  }\n}\n;\nexport function getDoubleFactorial(n) {\n  if (n <= 0) {\n    return 1;\n  } else {\n    var soln = 1;\n    for (var i = 0; i < n; i++) {\n      if (i + 1 % 2 == n % 2) {\n        soln *= i + 1;\n      }\n    }\n    return soln;\n  }\n}\n;\nexport function choose(n, k) {\n  return getFactorial(n) / (getFactorial(n - k) * getFactorial(k));\n}\n;\nexport function mapToSpherical(x, y, z) {\n  var rho = sqrt(x * x + y * y + z * z);\n  var theta = atan(y / x);\n  var phi = acos(z / rho);\n  ;\n  return [rho, theta, phi];\n}\nexport function getNormalization(n, l) {\n  var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n  var radius = rho => 2 * rho / (n * A0);\n  return rho => constTerm * exp(radius(rho) / -2) * pow(radius(rho), l);\n}\n;\nexport function getLaguerrePolynomial(n, l) {\n  var kl = 2 * l + 1;\n  var nl = n - l - 1;\n  return rho => {\n    var signedPower = 1;\n    var total = 0;\n    for (var i = 0; i <= n; i++) {\n      total += signedPower * getFactorial(nl + kl) / (getFactorial(nl - i) * getFactorial(kl + i) * getFactorial(i));\n      signedPower *= -rho;\n    }\n    var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n    var radius = 2 * rho / (n * A0);\n    return total * constTerm * exp(radius / -2) * pow(radius, l);\n  };\n}\n;\nexport function getLegendrePolynomial(l, m) {\n  return rho => {\n    var sign = m % 2 == 0 ? 1 : -1;\n    var base = sign * getDoubleFactorial(2 * m - 1) * pow(1 - rho * rho, m / 2);\n    var nextBase = (2 * m + 1) * rho * base;\n    if (l - m == 0) {\n      return base;\n    } else if (l - m == 1) {\n      return nextBase;\n    } else if (l - m >= 2) {\n      for (var i = 0; i < l - m - 1; i++) {\n        var nextPolynomial = ((2 * l + 1) * nextBase - (l + m) * base) / (l - m + 1);\n        base = nextBase;\n        nextBase = nextPolynomial;\n      }\n      return nextPolynomial;\n    }\n  };\n}\n;\nexport function getSphericalHarmonic(l, m) {\n  var sign = complex(m % 2 == 0 ? 1 : -1, 0);\n  var normalization = complex(sqrt(getFactorial(l - m) * (2 * l + 1) / (getFactorial(l + m) * 4 * Math.PI)), 0);\n  var complexTerm = phi => exp(complex(0, m * phi));\n  return phi => multiply(sign, normalization, complexTerm(phi));\n}\n;\nfunction getFunctional(n, l, m) {\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n  };\n}\nfunction getGradient(n, l, m) {\n  var delta = 0.01;\n  // TODO: Explicitly calculate functions for less computational load\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    var deltaRho = divide(subtract(getLaguerrePolynomial(n, l)(rho + delta / 2), getLaguerrePolynomial(n, l)(rho - delta / 2)), delta);\n    var deltaTheta = divide(subtract(getLegendrePolynomial(l, m)(theta + delta / 2), getLegendrePolynomial(l, m)(theta - delta / 2)), delta * rho);\n    var deltaPhi = divide(subtract(getSphericalHarmonic(l, m)(phi + delta / 2), getSphericalHarmonic(l, m)(phi - delta / 2)), delta * rho * Math.sin(theta));\n    var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n    var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n    var unitPhi = [sin(phi) * -1, cos(phi), 0];\n    return [add(multiply(unitRho[0], deltaRho), multiply(unitTheta[0], deltaTheta), multiply(unitPhi[0], deltaPhi)), add(multiply(unitRho[1], deltaRho), multiply(unitTheta[1], deltaTheta), multiply(unitPhi[1], deltaPhi)), add(multiply(unitRho[2], deltaRho), multiply(unitTheta[2], deltaTheta), multiply(unitPhi[2], deltaPhi))];\n  };\n}\nfunction getEnergyLevel(n) {\n  return 1.0 / (n * n);\n}\nclass Particle {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  move(dx, dy, dz) {\n    this.x += dx;\n    this.y += dy;\n    this.z += dz;\n  }\n  set(dx, dy, dz) {\n    this.x = dx;\n    this.y = dy;\n    this.z = dz;\n  }\n}\nconst Atom = class {\n  constructor(props) {\n    this.superposition = props.superposition;\n    this.particleCount = props.particleCount;\n    this.boxSize = props.boxSize;\n    this.timer = 0;\n    this.particles = [];\n    var probabilityMultiplier = 10000;\n    while (true || this.particles.length < props.particleCount) {\n      var newParticle = new Particle(randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize));\n      if (coinFlip(probabilityMultiplier * this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z, 0))) {\n        this.particles.push(newParticle);\n      }\n    }\n  }\n  getWavefunction(x, y, z, t) {\n    var total = 0;\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n    }\n    return total;\n  }\n  getProbabilityDistribution(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    return wavefunction * wavefunctionC;\n  }\n  getWavefunctionGradient(x, y, z, t) {\n    var total = [0, 0, 0];\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      var grad = multiply(phase, this.superposition[i].weight, getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z));\n      total[0] = add(total[0], grad[0]);\n      total[1] = add(total[1], grad[1]);\n      total[2] = add(total[2], grad[2]);\n    }\n    return total;\n  }\n  getVelocity(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    var gradient = this.getWavefunctionGradient(x, y, z, t);\n    var gradientC = [gradient[0].conjugate(), gradient[1].conjugate(), gradient[2].conjugate()];\n    var velocity = [divide(subtract(multiply(wavefunction, gradientC[0]), multiply(wavefunctionC, gradient[0])), multiply(wavefunction, wavefunctionC)), divide(subtract(multiply(wavefunction, gradientC[1]), multiply(wavefunctionC, gradient[1])), multiply(wavefunction, wavefunctionC)), divide(subtract(multiply(wavefunction, gradientC[2]), multiply(wavefunctionC, gradient[2])), multiply(wavefunction, wavefunctionC))];\n    return velocity;\n  }\n  update(increment) {\n    var deltat = 0.001;\n    var p = this.particles[0];\n    // for (var i = 0; i < this.particles.length; i++) {\n    //     var p = this.particles[i];\n    //     var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n    //     var oldNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n    //     p.move(velocity[0].im * deltat, velocity[1].im * deltat, velocity[2].im * deltat);\n    //     var newNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n    //     p.set(p.x * oldNorm / newNorm, p.y * oldNorm / newNorm, p.z * oldNorm / newNorm);\n    // }\n    this.timer += 1;\n    return this;\n  }\n};\nexport default Atom;","map":{"version":3,"names":["coinFlip","randRange","complex","sqrt","exp","sin","cos","add","subtract","multiply","divide","atan","acos","pow","A0","runningFactorial","factorial","i","push","getFactorial","n","soln","getDoubleFactorial","choose","k","mapToSpherical","x","y","z","rho","theta","phi","getNormalization","l","constTerm","radius","getLaguerrePolynomial","kl","nl","signedPower","total","getLegendrePolynomial","m","sign","base","nextBase","nextPolynomial","getSphericalHarmonic","normalization","Math","PI","complexTerm","getFunctional","sphericals","getGradient","delta","deltaRho","deltaTheta","deltaPhi","unitRho","unitTheta","unitPhi","getEnergyLevel","Particle","constructor","move","dx","dy","dz","set","Atom","props","superposition","particleCount","boxSize","timer","particles","probabilityMultiplier","length","newParticle","getProbabilityDistribution","getWavefunction","t","phase","weight","wavefunction","wavefunctionC","conjugate","getWavefunctionGradient","grad","getVelocity","gradient","gradientC","velocity","update","increment","deltat","p"],"sources":["/Users/joeyzhu/Projects/joey-j-zhu.github.io/src/components/fold/fold-graphics/atom.js"],"sourcesContent":["import { coinFlip, \n    randRange, \n  } from '../../../utils/functions';\nimport { complex, sqrt, exp, sin, cos, add, subtract, multiply, divide } from 'mathjs';\nimport { atan, acos, pow } from 'mathjs';\n\nconst A0 = 1.0;\n\nvar runningFactorial = [];\nvar factorial = 1;\nfor (var i = 0; i < 10; i++) {\n    factorial *= i + 1;\n    runningFactorial.push(factorial);\n};\n\nexport function getFactorial(n) {\n    if (n <= 0) {\n        return 1;\n    } else if (n > 10) {\n        return runningFactorial[n - 1];\n    } else {\n        var soln = 1;\n        for (var i = 0; i < n; i++) {\n            soln *= i + 1;\n        }\n        return soln;\n    }\n};\n\nexport function getDoubleFactorial(n) {\n    if (n <= 0) {\n        return 1;\n    } else {\n        var soln = 1;\n        for (var i = 0; i < n; i++) {\n            if (i + 1 % 2 == n % 2) {\n                soln *= i + 1;\n            }\n        }\n        return soln;\n    }\n};\n\nexport function choose(n, k) {\n    return getFactorial(n) / (getFactorial(n - k) * getFactorial(k));\n};\n\nexport function mapToSpherical(x, y, z) {\n    var rho = sqrt(x * x + y * y + z * z);\n    var theta = atan(y / x);\n    var phi = acos(z / rho);\n   ; return [rho, theta, phi];\n}\n\nexport function getNormalization(n, l) {\n    var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n    var radius = (rho) => (2 * rho) / (n * A0);\n    return (rho) => constTerm * exp(radius(rho) / -2) * pow(radius(rho), l);\n};\n\n\nexport function getLaguerrePolynomial(n, l) {\n    var kl = 2 * l + 1;\n    var nl = n - l - 1;\n\n    return (rho) => {\n        var signedPower = 1;\n        var total = 0;\n        for (var i = 0; i <= n; i++) {\n            total += signedPower * getFactorial(nl + kl) / (getFactorial(nl - i) * getFactorial(kl + i) * getFactorial(i));\n            signedPower *= -rho;\n        }\n        var constTerm = sqrt(pow(2 / (n * A0), 3) * getFactorial(n - l - 1) / (2 * n * getFactorial(n + l)));\n        var radius = (2 * rho) / (n * A0);\n        return total * constTerm * exp(radius / -2) * pow(radius, l);\n    }\n};\n\nexport function getLegendrePolynomial(l, m) {\n    return (rho) => {\n        var sign = m % 2 == 0 ? 1 : -1;\n        var base = sign * getDoubleFactorial(2 * m - 1) * pow(1 - rho * rho, m / 2);\n        var nextBase = (2 * m + 1) * rho * base;\n        if (l - m == 0) {\n            return base;\n        } else if (l - m == 1) {\n            return nextBase;\n        } else if (l - m >= 2) {\n            for (var i = 0; i < l - m - 1; i++) {\n                var nextPolynomial = ((2 * l + 1) * nextBase - (l + m) * base) / (l - m + 1);\n                base = nextBase;\n                nextBase = nextPolynomial;\n            }\n            return nextPolynomial;\n        }\n    }\n};\n\nexport function getSphericalHarmonic(l, m) {\n    var sign = complex(m % 2 == 0 ? 1 : -1, 0);\n    var normalization = complex(sqrt((getFactorial(l - m) * (2 * l + 1)) / (getFactorial(l + m) * 4 * Math.PI)), 0);\n    var complexTerm = (phi) => exp(complex(0, m * phi));\n\n    return (phi) => multiply(sign, normalization, complexTerm(phi));\n};\n\nfunction getFunctional(n, l, m) {\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n        \n        return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n    };\n}\n\nfunction getGradient(n, l, m) {\n\n    var delta = 0.01;\n    // TODO: Explicitly calculate functions for less computational load\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n\n        var deltaRho = divide(subtract(getLaguerrePolynomial(n, l)(rho + delta / 2), getLaguerrePolynomial(n, l)(rho - delta / 2)), (delta));\n        var deltaTheta = divide(subtract(getLegendrePolynomial(l, m)(theta + delta / 2), getLegendrePolynomial(l, m)(theta - delta / 2)), (delta * rho));\n        var deltaPhi = divide(subtract(getSphericalHarmonic(l, m)(phi + delta / 2), getSphericalHarmonic(l, m)(phi - delta / 2)), (delta * rho * Math.sin(theta)));\n\n        var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n        var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n        var unitPhi = [sin(phi) * -1, cos(phi), 0];\n\n        return [\n            add(multiply(unitRho[0], deltaRho), multiply(unitTheta[0], deltaTheta), multiply(unitPhi[0], deltaPhi)),\n            add(multiply(unitRho[1], deltaRho), multiply(unitTheta[1], deltaTheta), multiply(unitPhi[1], deltaPhi)),\n            add(multiply(unitRho[2], deltaRho), multiply(unitTheta[2], deltaTheta), multiply(unitPhi[2], deltaPhi)),\n        ];\n    }\n}\n\nfunction getEnergyLevel(n) {\n    return 1.0 / (n * n);\n}\n\n\nclass Particle {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    move(dx, dy, dz) {\n        this.x += dx;\n        this.y += dy;\n        this.z += dz;\n    }\n\n    set(dx, dy, dz) {\n        this.x = dx;\n        this.y = dy;\n        this.z = dz;\n    }\n}\n\n\nconst Atom = class {\n    constructor (props) {\n        this.superposition = props.superposition;\n        this.particleCount = props.particleCount;\n        this.boxSize = props.boxSize;\n        this.timer = 0;\n\n        this.particles = [];\n        \n        var probabilityMultiplier = 10000;\n        while (true || this.particles.length < props.particleCount) {\n            var newParticle = new Particle(\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n            );\n            if (coinFlip(probabilityMultiplier * this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z, 0))) {\n                this.particles.push(newParticle);\n            }\n        }\n    }\n\n    getWavefunction(x, y, z, t) {\n        var total = 0;\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n        }\n        return total;\n    }\n\n    getProbabilityDistribution(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        return wavefunction * wavefunctionC;    \n    }\n\n    getWavefunctionGradient(x, y, z, t) {\n        var total = [0, 0, 0];\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            var grad = multiply(phase, this.superposition[i].weight, getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z));\n            total[0] = add(total[0], grad[0]);\n            total[1] = add(total[1], grad[1]);\n            total[2] = add(total[2], grad[2]);\n        }\n        return total;\n    }\n    \n    getVelocity(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        var gradient = this.getWavefunctionGradient(x, y, z, t);\n        var gradientC = [\n            gradient[0].conjugate(), \n            gradient[1].conjugate(), \n            gradient[2].conjugate(), \n        ]\n        var velocity = [\n            divide(subtract(multiply(wavefunction, gradientC[0]), multiply(wavefunctionC, gradient[0])), multiply(wavefunction, wavefunctionC)),\n            divide(subtract(multiply(wavefunction, gradientC[1]), multiply(wavefunctionC, gradient[1])), multiply(wavefunction, wavefunctionC)),\n            divide(subtract(multiply(wavefunction, gradientC[2]), multiply(wavefunctionC, gradient[2])), multiply(wavefunction, wavefunctionC))\n        ]\n        return velocity;\n    }\n\n    update(increment) {\n        var deltat = 0.001;\n        var p = this.particles[0];\n        // for (var i = 0; i < this.particles.length; i++) {\n        //     var p = this.particles[i];\n        //     var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n        //     var oldNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n        //     p.move(velocity[0].im * deltat, velocity[1].im * deltat, velocity[2].im * deltat);\n        //     var newNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n        //     p.set(p.x * oldNorm / newNorm, p.y * oldNorm / newNorm, p.z * oldNorm / newNorm);\n        // }\n        this.timer += 1;\n        return this;\n    }\n}\n\nexport default Atom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}