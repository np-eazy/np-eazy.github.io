{"ast":null,"code":"import { coinFlip, randRange, getFactorial, getDoubleFactorial, choose, mapToSpherical, getNormalization, getLaguerrePolynomial, getLegendrePolynomial, getSphericalHarmonic } from '../../../utils/functions';\nimport { complex, conjugate, sqrt, exp, atan, sin, cos, acos, pow, add, subtract, multiply, divide } from 'mathjs';\nconst A0 = 1;\nfunction getFunctional(n, l, m) {\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n  };\n}\nfunction getGradient(n, l, m) {\n  var delta = 0.01;\n  // TODO: Explicitly calculate functions for less computational load\n  return (x, y, z) => {\n    var sphericals = mapToSpherical(x, y, z);\n    var rho = sphericals[0];\n    var theta = sphericals[1];\n    var phi = sphericals[2];\n    var deltaRho = divide(subtract(getLaguerrePolynomial(n, l)(rho + delta / 2), getLaguerrePolynomial(n, l)(rho - delta / 2)), delta);\n    var deltaTheta = divide(subtract(getLegendrePolynomial(l, m)(theta + delta / 2), getLegendrePolynomial(l, m)(theta - delta / 2)), delta * rho);\n    var deltaPhi = divide(subtract(getSphericalHarmonic(l, m)(phi + delta / 2), getSphericalHarmonic(l, m)(phi - delta / 2)), delta * rho * Math.sin(theta));\n    var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n    var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n    var unitPhi = [sin(phi) * -1, cos(phi), 0];\n    return [add(multiply(unitRho[0], deltaRho), multiply(unitTheta[0], deltaTheta), multiply(unitPhi[0], deltaPhi)), add(multiply(unitRho[1], deltaRho), multiply(unitTheta[1], deltaTheta), multiply(unitPhi[1], deltaPhi)), add(multiply(unitRho[2], deltaRho), multiply(unitTheta[2], deltaTheta), multiply(unitPhi[2], deltaPhi))];\n  };\n}\nfunction getEnergyLevel(n) {\n  return 1 / (n * n);\n}\nclass Particle {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  move(dx, dy, dz) {\n    this.x += dx;\n    this.y += dy;\n    this.z += dz;\n  }\n  set(dx, dy, dz) {\n    this.x = dx;\n    this.y = dy;\n    this.z = dz;\n  }\n}\nconst Atom = class {\n  constructor(props) {\n    this.superposition = props.superposition;\n    this.particleCount = props.particleCount;\n    this.boxSize = props.boxSize;\n    this.timer = 0;\n    this.particles = [];\n    var probabilityMultiplier = 10000;\n    while (this.particles.length < props.particleCount) {\n      var newParticle = new Particle(randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize), randRange(props.boxSize * -1, props.boxSize));\n      if (coinFlip(probabilityMultiplier * this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z, 0))) {\n        this.particles.push(newParticle);\n      }\n    }\n  }\n  getWavefunction(x, y, z, t) {\n    var total = 0;\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n    }\n    return total;\n  }\n  getProbabilityDistribution(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    return wavefunction * wavefunctionC;\n  }\n  getWavefunctionGradient(x, y, z, t) {\n    var total = [0, 0, 0];\n    for (var i = 0; i < this.superposition.length; i++) {\n      var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n      var grad = multiply(phase, this.superposition[i].weight, getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z));\n      total[0] = add(total[0], grad[0]);\n      total[1] = add(total[1], grad[1]);\n      total[2] = add(total[2], grad[2]);\n    }\n    return total;\n  }\n  getVelocity(x, y, z, t) {\n    var wavefunction = this.getWavefunction(x, y, z, t);\n    var wavefunctionC = wavefunction.conjugate();\n    var gradient = this.getWavefunctionGradient(x, y, z, t);\n    var gradientC = [gradient[0].conjugate(), gradient[1].conjugate(), gradient[2].conjugate()];\n    var velocity = [divide(subtract(multiply(wavefunction, gradientC[0]), multiply(wavefunctionC, gradient[0])), multiply(wavefunction, wavefunctionC)), divide(subtract(multiply(wavefunction, gradientC[1]), multiply(wavefunctionC, gradient[1])), multiply(wavefunction, wavefunctionC)), divide(subtract(multiply(wavefunction, gradientC[2]), multiply(wavefunctionC, gradient[2])), multiply(wavefunction, wavefunctionC))];\n    return velocity;\n  }\n  update(increment) {\n    var deltat = 0.001;\n    var p = this.particles[0];\n    //console.log(p);\n    for (var i = 0; i < this.particles.length; i++) {\n      var p = this.particles[i];\n      var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n      var oldNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n      p.move(velocity[0].im * deltat, velocity[1].im * deltat, velocity[2].im * deltat);\n      var newNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n      p.set(p.x * oldNorm / newNorm, p.y * oldNorm / newNorm, p.z * oldNorm / newNorm);\n    }\n    this.timer += 1;\n    return this;\n  }\n};\nexport default Atom;","map":{"version":3,"names":["coinFlip","randRange","getFactorial","getDoubleFactorial","choose","mapToSpherical","getNormalization","getLaguerrePolynomial","getLegendrePolynomial","getSphericalHarmonic","complex","conjugate","sqrt","exp","atan","sin","cos","acos","pow","add","subtract","multiply","divide","A0","getFunctional","n","l","m","x","y","z","sphericals","rho","theta","phi","getGradient","delta","deltaRho","deltaTheta","deltaPhi","Math","unitRho","unitTheta","unitPhi","getEnergyLevel","Particle","constructor","move","dx","dy","dz","set","Atom","props","superposition","particleCount","boxSize","timer","particles","probabilityMultiplier","length","newParticle","getProbabilityDistribution","push","getWavefunction","t","total","i","phase","weight","wavefunction","wavefunctionC","getWavefunctionGradient","grad","getVelocity","gradient","gradientC","velocity","update","increment","deltat","p","oldNorm","im","newNorm"],"sources":["/Users/joeyzhu/Projects/joey-j-zhu.github.io/src/components/fold/fold-graphics/atom.js"],"sourcesContent":["import { coinFlip, \n    randRange, \n    getFactorial, \n    getDoubleFactorial, \n    choose, mapToSpherical, \n    getNormalization, getLaguerrePolynomial, \n    getLegendrePolynomial, \n    getSphericalHarmonic,    } from '../../../utils/functions';\nimport { complex, conjugate, sqrt, exp, atan, sin, cos, acos, pow, add, subtract, multiply, divide } from 'mathjs';\n\nconst A0 = 1;\n\nfunction getFunctional(n, l, m) {\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n        \n        return multiply(getLaguerrePolynomial(n, l)(rho), getLegendrePolynomial(l, m)(cos(theta)), getSphericalHarmonic(l, m)(phi));\n    };\n}\n\nfunction getGradient(n, l, m) {\n\n    var delta = 0.01;\n    // TODO: Explicitly calculate functions for less computational load\n    return (x, y, z) => {\n        var sphericals = mapToSpherical(x, y, z);\n        var rho = sphericals[0];\n        var theta = sphericals[1];\n        var phi = sphericals[2];\n\n        var deltaRho = divide(subtract(getLaguerrePolynomial(n, l)(rho + delta / 2), getLaguerrePolynomial(n, l)(rho - delta / 2)), (delta));\n        var deltaTheta = divide(subtract(getLegendrePolynomial(l, m)(theta + delta / 2), getLegendrePolynomial(l, m)(theta - delta / 2)), (delta * rho));\n        var deltaPhi = divide(subtract(getSphericalHarmonic(l, m)(phi + delta / 2), getSphericalHarmonic(l, m)(phi - delta / 2)), (delta * rho * Math.sin(theta)));\n\n        var unitRho = [sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta)];\n        var unitTheta = [cos(theta) * cos(phi), cos(theta) * sin(phi), sin(theta) * -1];\n        var unitPhi = [sin(phi) * -1, cos(phi), 0];\n\n        return [\n            add(multiply(unitRho[0], deltaRho), multiply(unitTheta[0], deltaTheta), multiply(unitPhi[0], deltaPhi)),\n            add(multiply(unitRho[1], deltaRho), multiply(unitTheta[1], deltaTheta), multiply(unitPhi[1], deltaPhi)),\n            add(multiply(unitRho[2], deltaRho), multiply(unitTheta[2], deltaTheta), multiply(unitPhi[2], deltaPhi)),\n        ];\n    }\n}\n\nfunction getEnergyLevel(n) {\n    return 1 / (n * n);\n}\n\n\nclass Particle {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    move(dx, dy, dz) {\n        this.x += dx;\n        this.y += dy;\n        this.z += dz;\n    }\n\n    set(dx, dy, dz) {\n        this.x = dx;\n        this.y = dy;\n        this.z = dz;\n    }\n}\n\n\nconst Atom = class {\n    constructor (props) {\n        this.superposition = props.superposition;\n        this.particleCount = props.particleCount;\n        this.boxSize = props.boxSize;\n        this.timer = 0;\n\n        this.particles = [];\n        \n        var probabilityMultiplier = 10000;\n        while (this.particles.length < props.particleCount) {\n            var newParticle = new Particle(\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n                randRange(props.boxSize * -1, props.boxSize),\n            );\n            if (coinFlip(probabilityMultiplier * this.getProbabilityDistribution(newParticle.x, newParticle.y, newParticle.z, 0))) {\n                this.particles.push(newParticle);\n            }\n        }\n    }\n\n    getWavefunction(x, y, z, t) {\n        var total = 0;\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            total = add(total, multiply(phase, this.superposition[i].weight, getFunctional(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z)));\n        }\n        return total;\n    }\n\n    getProbabilityDistribution(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        return wavefunction * wavefunctionC;    \n    }\n\n    getWavefunctionGradient(x, y, z, t) {\n        var total = [0, 0, 0];\n        for (var i = 0; i < this.superposition.length; i++) {\n            var phase = exp(complex(0, getEnergyLevel(this.superposition[i].n) * t));\n            var grad = multiply(phase, this.superposition[i].weight, getGradient(this.superposition[i].n, this.superposition[i].l, this.superposition[i].m)(x, y, z));\n            total[0] = add(total[0], grad[0]);\n            total[1] = add(total[1], grad[1]);\n            total[2] = add(total[2], grad[2]);\n        }\n        return total;\n    }\n    \n    getVelocity(x, y, z, t) {\n        var wavefunction = this.getWavefunction(x, y, z, t);\n        var wavefunctionC = wavefunction.conjugate();\n        var gradient = this.getWavefunctionGradient(x, y, z, t);\n        var gradientC = [\n            gradient[0].conjugate(), \n            gradient[1].conjugate(), \n            gradient[2].conjugate(), \n        ]\n        var velocity = [\n            divide(subtract(multiply(wavefunction, gradientC[0]), multiply(wavefunctionC, gradient[0])), multiply(wavefunction, wavefunctionC)),\n            divide(subtract(multiply(wavefunction, gradientC[1]), multiply(wavefunctionC, gradient[1])), multiply(wavefunction, wavefunctionC)),\n            divide(subtract(multiply(wavefunction, gradientC[2]), multiply(wavefunctionC, gradient[2])), multiply(wavefunction, wavefunctionC))\n        ]\n        return velocity;\n    }\n\n    update(increment) {\n        var deltat = 0.001;\n        var p = this.particles[0];\n        //console.log(p);\n        for (var i = 0; i < this.particles.length; i++) {\n            var p = this.particles[i];\n            var velocity = this.getVelocity(p.x, p.y, p.z, this.timer);\n            var oldNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n            p.move(velocity[0].im * deltat, velocity[1].im * deltat, velocity[2].im * deltat);\n            var newNorm = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n            p.set(p.x * oldNorm / newNorm, p.y * oldNorm / newNorm, p.z * oldNorm / newNorm);\n        }\n        this.timer += 1;\n        return this;\n    }\n}\n\nexport default Atom;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}